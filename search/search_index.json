{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"efxdev-docs"},{"location":"demo/","tags":["hyped","dodoche"],"text":"Toto For full documentation visit mkdocs.org . HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Ctrl + Alt + Del Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well! Method Description GET Fetch resource PUT Update resource DELETE Delete resource stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Back to index Welcome to MkDocs For full documentation visit mkdocs.org . Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Commands HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Go to toto 1 2 3 # Code block content import React from 'react' ; const toto = React . useState ( 0 ); # Code block content bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Toto For full documentation visit mkdocs.org . HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Ctrl + Alt + Del Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well! Method Description GET Fetch resource PUT Update resource DELETE Delete resource stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 \u21a9","title":"Toto"},{"location":"demo/#toto","text":"For full documentation visit mkdocs.org . HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Ctrl + Alt + Del Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well! Method Description GET Fetch resource PUT Update resource DELETE Delete resource stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*]","title":"Toto"},{"location":"demo/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Back to index","title":"Commands"},{"location":"demo/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Welcome to MkDocs"},{"location":"demo/#commands_1","text":"HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"demo/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Go to toto 1 2 3 # Code block content import React from 'react' ; const toto = React . useState ( 0 ); # Code block content bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Project layout"},{"location":"demo/#toto_1","text":"For full documentation visit mkdocs.org . HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Ctrl + Alt + Del Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Tab 1 Tab 2 Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit. I'm an annotation! Phasellus posuere in sem ut cursus (1) I'm an annotation as well! Method Description GET Fetch resource PUT Update resource DELETE Delete resource stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 \u21a9","title":"Toto"},{"location":"pages/advanced/","tags":["web","advanced"],"text":"","title":"Advanced web"},{"location":"pages/advanced/javascript/","tags":["js","javascript","es6","Typescript"],"text":"","title":"Advanced Javascript"},{"location":"pages/advanced/javascript/async-await/","text":"Intro Info The async keyword is used to declare async functions Async functions are functions that are instances of the AsyncFunction constructor Unlike normal functions, async functions always return a promise Normal function function greet () { return \"Hello\" ; } greet (); // browser console: \"Hello\" async function async function greet () { return \"Hello\" ; } greet (); // browser console: Promise {<fulfilled>: \"Hello\"} async function with promise async function greet () { return Promise . resolve ( \"Hello\" ); } greet (). then ( value => console . log ( value ) ); // browser console: \u2018Hello\u2019 Await Info Await keyword can be put infront of any async promise based function to pause your code until that promise settles and returns its result await only works inside async functions. Cannot use await in normal functions async with await async function greet () { let promise = new Promise (( resolve , reject ) => { setTimeout (() => resolve ( \"Hello\" ), 1000 ) }); let result = await promise ; // await until the promise resolve console . log ( result ) ; // \"Hello\" } greet () Sequential execution Function hello function resolveHello () { return new Promise ( resolve => { setTimeout (() => resolve ( \u2018 Hello \u2019 ), 2000 ); } }; Function world function resolveWorld () { return new Promise ( resolve => { setTimeout (() => resolve ( \u2018 Hello \u2019 ), 2000 ); } }; Sequential start async function sequentialStart () { const hello = await resolveHello (); console . log ( hello ); // Logs me after 2 secondes const world = await resolveWorld (); console . log ( world ); // Logs after 2 + 1 = 3 seconds } sequentialStart (); Parrallel execution resolveHello fn function resolveHello () { return new Promise ( resolve => { setTimeout (() => { resolve ( 'Hello' ); }, 2000 ); }); } resolveWorld fn function resolveWorld () { return new Promise ( resolve => { setTimeout ( function () { resolve ( 'World' ); }, 1000 ) }); } parallel function function parallel () { Promise . all ([ ( async () => console . log ( await resolveHello ()))(), // Total time taken = 2 seconds ( async () => console . log ( await resolveWorld ()))(), // Total time taken = 1 seconds ]); } parallel (); // Logs 'World' in first then: 'Hello' // Total time taken : 2 secs parallel function with await async function parallel () { await Promise . all ([ ( async () => console . log ( await resolveHello ()))(), // Total time taken = 2 seconds ( async () => console . log ( await resolveWorld ()))(), // Total time taken = 1 seconds ]); console . log ( 'Finally' ); // Logged after World Hello } parallel (); // Logs 'World' in first then: 'Hello' 'Finally' Chaining promises vs async-await with 'then' const promise = fetchCurrentUser ( api / user \u2019 ) promise . then ( result => fetchFollowersByUserId ( \u00b0 api / followers / $ { result . userId } )) . then ( result => fetchFollowerInterests ( api / interests / $ { result . followerId } )) . then ( result => fetchInterestTags ( api / tags / $ { result . interestId } )) . then ( result => fetchTagDescription ( api / description / $ { result . tagId } )) . then ( result => console . log ( 'Display the data' , result )); with 'await' async function fetchData () { const user = await fetchCurrentUser ( 'api/user' ); const followers = await fetchFollowersByUserId ( `api/followers/ ${ result . userId } ` ); const interests = await fetchFollowerInterests ( `api/interests/ ${ result . followerId } ` ) const tags = await fetchInterestTags ( `api/tags/ ${ result . interestId } ` ); const description = await fetchTagDescription ( `api/description/ ${ result . tagId } ` ); console . log ( 'Display the data' , result ); } with 'await' and 'try..catch' async function fetchData () { try { const user = await fetchCurrentUser ( 'api/user' ); const followers = await fetchFollowersByUserId ( `api/followers/ ${ result . userId } ` ); const interests = await fetchFollowerInterests ( `api/interests/ ${ result . followerId } ` ) const tags = await fetchInterestTags ( `api/tags/ ${ result . interestId } ` ); const description = await fetchTagDescription ( `api/description/ ${ result . tagId } ` ); console . log ( 'Display the data' , result ); } catch ( e ) { console . log ( 'Error' , e ); } Exercise - async await Question Problem statement: Define a function called sleep which accepts a duration parameter The sleep function should suspend execution of the function it is invoked in Solution function sleep ( duration ) { return new Promise ( resolve => setTimeout ( resolve , duration )); } async function main () { console . log ( 'Logs immediately' ); await sleep ( 2000 ); console . log ( 'Logs after 2 seconds' ); } main (); // output: 'Logs immediately' // then output: 'Logs after 2 seconds'","title":"Async await"},{"location":"pages/advanced/javascript/async-await/#intro","text":"Info The async keyword is used to declare async functions Async functions are functions that are instances of the AsyncFunction constructor Unlike normal functions, async functions always return a promise Normal function function greet () { return \"Hello\" ; } greet (); // browser console: \"Hello\" async function async function greet () { return \"Hello\" ; } greet (); // browser console: Promise {<fulfilled>: \"Hello\"} async function with promise async function greet () { return Promise . resolve ( \"Hello\" ); } greet (). then ( value => console . log ( value ) ); // browser console: \u2018Hello\u2019","title":"Intro"},{"location":"pages/advanced/javascript/async-await/#await","text":"Info Await keyword can be put infront of any async promise based function to pause your code until that promise settles and returns its result await only works inside async functions. Cannot use await in normal functions async with await async function greet () { let promise = new Promise (( resolve , reject ) => { setTimeout (() => resolve ( \"Hello\" ), 1000 ) }); let result = await promise ; // await until the promise resolve console . log ( result ) ; // \"Hello\" } greet ()","title":"Await"},{"location":"pages/advanced/javascript/async-await/#sequential-execution","text":"Function hello function resolveHello () { return new Promise ( resolve => { setTimeout (() => resolve ( \u2018 Hello \u2019 ), 2000 ); } }; Function world function resolveWorld () { return new Promise ( resolve => { setTimeout (() => resolve ( \u2018 Hello \u2019 ), 2000 ); } }; Sequential start async function sequentialStart () { const hello = await resolveHello (); console . log ( hello ); // Logs me after 2 secondes const world = await resolveWorld (); console . log ( world ); // Logs after 2 + 1 = 3 seconds } sequentialStart ();","title":"Sequential execution"},{"location":"pages/advanced/javascript/async-await/#parrallel-execution","text":"resolveHello fn function resolveHello () { return new Promise ( resolve => { setTimeout (() => { resolve ( 'Hello' ); }, 2000 ); }); } resolveWorld fn function resolveWorld () { return new Promise ( resolve => { setTimeout ( function () { resolve ( 'World' ); }, 1000 ) }); } parallel function function parallel () { Promise . all ([ ( async () => console . log ( await resolveHello ()))(), // Total time taken = 2 seconds ( async () => console . log ( await resolveWorld ()))(), // Total time taken = 1 seconds ]); } parallel (); // Logs 'World' in first then: 'Hello' // Total time taken : 2 secs parallel function with await async function parallel () { await Promise . all ([ ( async () => console . log ( await resolveHello ()))(), // Total time taken = 2 seconds ( async () => console . log ( await resolveWorld ()))(), // Total time taken = 1 seconds ]); console . log ( 'Finally' ); // Logged after World Hello } parallel (); // Logs 'World' in first then: 'Hello' 'Finally'","title":"Parrallel execution"},{"location":"pages/advanced/javascript/async-await/#chaining-promises-vs-async-await","text":"with 'then' const promise = fetchCurrentUser ( api / user \u2019 ) promise . then ( result => fetchFollowersByUserId ( \u00b0 api / followers / $ { result . userId } )) . then ( result => fetchFollowerInterests ( api / interests / $ { result . followerId } )) . then ( result => fetchInterestTags ( api / tags / $ { result . interestId } )) . then ( result => fetchTagDescription ( api / description / $ { result . tagId } )) . then ( result => console . log ( 'Display the data' , result )); with 'await' async function fetchData () { const user = await fetchCurrentUser ( 'api/user' ); const followers = await fetchFollowersByUserId ( `api/followers/ ${ result . userId } ` ); const interests = await fetchFollowerInterests ( `api/interests/ ${ result . followerId } ` ) const tags = await fetchInterestTags ( `api/tags/ ${ result . interestId } ` ); const description = await fetchTagDescription ( `api/description/ ${ result . tagId } ` ); console . log ( 'Display the data' , result ); } with 'await' and 'try..catch' async function fetchData () { try { const user = await fetchCurrentUser ( 'api/user' ); const followers = await fetchFollowersByUserId ( `api/followers/ ${ result . userId } ` ); const interests = await fetchFollowerInterests ( `api/interests/ ${ result . followerId } ` ) const tags = await fetchInterestTags ( `api/tags/ ${ result . interestId } ` ); const description = await fetchTagDescription ( `api/description/ ${ result . tagId } ` ); console . log ( 'Display the data' , result ); } catch ( e ) { console . log ( 'Error' , e ); }","title":"Chaining promises vs async-await"},{"location":"pages/advanced/javascript/async-await/#exercise-async-await","text":"Question Problem statement: Define a function called sleep which accepts a duration parameter The sleep function should suspend execution of the function it is invoked in Solution function sleep ( duration ) { return new Promise ( resolve => setTimeout ( resolve , duration )); } async function main () { console . log ( 'Logs immediately' ); await sleep ( 2000 ); console . log ( 'Logs after 2 seconds' ); } main (); // output: 'Logs immediately' // then output: 'Logs after 2 seconds'","title":"Exercise - async await"},{"location":"pages/advanced/javascript/callback/","text":"Intro Info In JavaScript, functions are first class objects : Just like an object, a function can be passed as an argument to a function A function can also be returned as values from other functions A simple function callback function greet ( name ) { console . log ( `Hello ${ name } ` ); } function greetVishwas ( greetFn ) { const name = \"Vishwas\" ; greetFn ( name ); } greetVishwas ( greet ); // output: 'Hello Vishwas' A higherOrder Function callback function greet ( name ) { console . log ( `Hello ${ name } ` ) } function higherOrderFunction ( callback ) { const name = \"Vishwas\" callback ( name ) } higherOrderFunction ( greet ); // output: 'Hello Vishwas' Any function that is passed as an argument to another function is called a callback function in JavaScript The function which accepts a function as an argument or returns a function is called a higher order function Synchronous callbacks Info A callback which is executed immediately is called a synchronous callback. A synchronous callback test function greet ( name ) { console . log ( `Hello ${ name } ` ); } function higherOrderFunction ( callback ) { const name = \"Vishwas\" ; callback ( name ); } higherOrderFunction ( greet ); // output: 'Hello Vishwas' A synchronous callback with js built-in function let numbers = [ 1 , 2 , 4 , 7 , 3 , 5 , 6 ]; numbers . sort (( a , b ) => a - b ); // output: [ 1, 2, 3, 4, 5, 6, 7 ] numbers . map ( n => n * 2 ); // output: [ 2, 4, 6, 8, 10, 12, 14 ] numbers . filter ( n => n % 2 === 0 ); // output: [ 2, 4, 6 ] Asynchronous callbacks Asynchronous Example with a setTimeout function greet ( name ) { console . log ( `Hello ${ name } ` ); } setTimeout ( greet , 2000 , 'Vishwas' ); function callback () { document . getElementById ( \"demo\" ). innerHTML = \"Hello World\" ; } // output: 'Hello Vishwas' after a delay of 2 secs Asynchronous Example with addEventListener document . getElementById ( \"btn\" ). addEventListener ( \"click\" , callback ); Asynchronous Example with a get $ . get ( \"url\" , function ( data ) { $ ( \".result\" ). html ( data ); alert ( \"Load was performed.\" ); }) Callback functions allow you to delay the execution of a function.","title":"Callback"},{"location":"pages/advanced/javascript/callback/#intro","text":"Info In JavaScript, functions are first class objects : Just like an object, a function can be passed as an argument to a function A function can also be returned as values from other functions A simple function callback function greet ( name ) { console . log ( `Hello ${ name } ` ); } function greetVishwas ( greetFn ) { const name = \"Vishwas\" ; greetFn ( name ); } greetVishwas ( greet ); // output: 'Hello Vishwas' A higherOrder Function callback function greet ( name ) { console . log ( `Hello ${ name } ` ) } function higherOrderFunction ( callback ) { const name = \"Vishwas\" callback ( name ) } higherOrderFunction ( greet ); // output: 'Hello Vishwas' Any function that is passed as an argument to another function is called a callback function in JavaScript The function which accepts a function as an argument or returns a function is called a higher order function","title":"Intro"},{"location":"pages/advanced/javascript/callback/#synchronous-callbacks","text":"Info A callback which is executed immediately is called a synchronous callback. A synchronous callback test function greet ( name ) { console . log ( `Hello ${ name } ` ); } function higherOrderFunction ( callback ) { const name = \"Vishwas\" ; callback ( name ); } higherOrderFunction ( greet ); // output: 'Hello Vishwas' A synchronous callback with js built-in function let numbers = [ 1 , 2 , 4 , 7 , 3 , 5 , 6 ]; numbers . sort (( a , b ) => a - b ); // output: [ 1, 2, 3, 4, 5, 6, 7 ] numbers . map ( n => n * 2 ); // output: [ 2, 4, 6, 8, 10, 12, 14 ] numbers . filter ( n => n % 2 === 0 ); // output: [ 2, 4, 6 ]","title":"Synchronous callbacks"},{"location":"pages/advanced/javascript/callback/#asynchronous-callbacks","text":"Asynchronous Example with a setTimeout function greet ( name ) { console . log ( `Hello ${ name } ` ); } setTimeout ( greet , 2000 , 'Vishwas' ); function callback () { document . getElementById ( \"demo\" ). innerHTML = \"Hello World\" ; } // output: 'Hello Vishwas' after a delay of 2 secs Asynchronous Example with addEventListener document . getElementById ( \"btn\" ). addEventListener ( \"click\" , callback ); Asynchronous Example with a get $ . get ( \"url\" , function ( data ) { $ ( \".result\" ). html ( data ); alert ( \"Load was performed.\" ); }) Callback functions allow you to delay the execution of a function.","title":"Asynchronous callbacks"},{"location":"pages/advanced/javascript/class/","text":"Intro Person class class Person { constructor ( name ) { this . name = name ; } sayMyName () { console . log ( My name is $ { this . name } ); } eat ( food ) { console . log ( I 'm eating ${food}' ); } sleep () { console . log ( \u2019 Sleeping \u2019 ); } } const vishwas = new Person ( \u2019 vishwas \u2019 ); const batman = new Person ( * Batman \u2019 ); const superman = new Person ( \u2019 Superman \u2019 ); const vishwas = Person ( 'Vishwas' ); vishwas . sayMyName (); // My name is Vishwas vishwas . eat ( 'pizza' ); // I'm eating pizza vishwas . sleep (); // Sleeping Exercice Calculator and ScientificCalculator class class Calculator { constructor () { this . value = 0 ; } add ( num ) { this . value += num ; } subtract ( num ) { this . value -= num ; } print () { console . log ( this . value ); } } class ScientificCalculator extends Calculator { square () { this . value *= this . value ; } } Use the ScientificCalculator class const s = new ScientificCalculator (); s . add ( 10 ); s . subtract ( 5 ); s . square (); s . print (); // Logs 25 to the console; // or write with dot syntax: s . add ( 10 ). subtract ( 5 ). square (). print ();","title":"Class"},{"location":"pages/advanced/javascript/class/#intro","text":"Person class class Person { constructor ( name ) { this . name = name ; } sayMyName () { console . log ( My name is $ { this . name } ); } eat ( food ) { console . log ( I 'm eating ${food}' ); } sleep () { console . log ( \u2019 Sleeping \u2019 ); } } const vishwas = new Person ( \u2019 vishwas \u2019 ); const batman = new Person ( * Batman \u2019 ); const superman = new Person ( \u2019 Superman \u2019 ); const vishwas = Person ( 'Vishwas' ); vishwas . sayMyName (); // My name is Vishwas vishwas . eat ( 'pizza' ); // I'm eating pizza vishwas . sleep (); // Sleeping","title":"Intro"},{"location":"pages/advanced/javascript/class/#exercice","text":"Calculator and ScientificCalculator class class Calculator { constructor () { this . value = 0 ; } add ( num ) { this . value += num ; } subtract ( num ) { this . value -= num ; } print () { console . log ( this . value ); } } class ScientificCalculator extends Calculator { square () { this . value *= this . value ; } } Use the ScientificCalculator class const s = new ScientificCalculator (); s . add ( 10 ); s . subtract ( 5 ); s . square (); s . print (); // Logs 25 to the console; // or write with dot syntax: s . add ( 10 ). subtract ( 5 ). square (). print ();","title":"Exercice"},{"location":"pages/advanced/javascript/closures/","text":"Double incovation Double Invokation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function outer () { let counter = 0 ; function inner () { counter ++ ; console . log ( counter ); } inner (); } outer (); outer (); // What is logged to the console? // Line 5 : 1 // Line 6 : 1 Every time a function gets invoked, it gets a brand new local memory which contains all the variables and arguments. When we finish running the function, that temporary memory is pretty much deleted. When we invoke the function again it doesn't remember the data that was stored in the memory from the previous run. Invoke later Invoke later 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function outer () { let counter = 0 ; function inner () { counter ++ ; console . log ( counter ); } return inner ; } const fn = outer (); fn (); fn (); // What is logged to the console? // Line 5 : 1 // Line 6 : 2 Closures in JavaScript A closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). Closures are created every time a function is created, at function creation time. In JavaScript, when we return a function from another function, we are effectively returning a combination of the function definition along with the function's scope chain. This would let the function definition have an associated persistent memory which could hold on to live data between executions. Info The combination of the function and its scope chain (lexical environemnt) is what is called a closure in JavaScript. Multiple closure instances function outer () { let counter = 9 function inner () { counter ++ console . log ( counter ) } return inner } const fn1 = outer (); fn1 (); fn1 (); const fn2 = outer (); fn2 (); fn2 (); // What is logged to the console? // fn1 output: 10 11 // fn2 output: 10 11 Info Multiple closure instances don't share the same persistent memory. Exercice: memoization with Closures Implement optimizedSquare function First implementation function square ( num ) { return num * num ; } function memoizedSquare () { let cache = {}; return function optimizedSquare ( num ) { ... } } Final implementation function square ( num ) { return num * num ; } function memoizedSquare () { let cache = {}; return function optimizedSquare ( num ) { if ( num in cache ) { console . log ( 'Returning from cache' ); return cache [ num ]; } else { console . log ( 'Computing square' ); const result = square ( num ); cache [ num ] = result ; return result ; } } } Testing the optimizedSquare memo closure Run memoizedSquare const memoSquare = memoizedSquare (); console . log ( memoSquare ( 2 )); console . log ( memoSquare ( 5 )); console . log ( memoSquare ( 5 )); // What is logged to the console? // Computing square 4 // Computing square 25 // Returning from cache 25 Generic memoization implementation memoize function function memoize ( callback ) { let cache = {}; return function (... args ) { const key = args . toString (); if ( key in cache ) { console . log ( \"Returning from cache\" ); return cache [ key ]; } else { console . log ( \"Computing result\" ); const result = callback (... args ); cache [ key ] = result ; return result ; } } } Use the memoize fn with a callback // the callback function add ( a , b ) { return a + b ; } // Create the memo with the callback const memoizedAdd = memoize ( add ); console . log ( memoizedAdd ( 2 , 4 )); console . log ( memoizedAdd ( 2 , 4 )); // What is logged to the console? // Computing result 6 // Returning from cache 6","title":"Closures"},{"location":"pages/advanced/javascript/closures/#double-incovation","text":"Double Invokation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function outer () { let counter = 0 ; function inner () { counter ++ ; console . log ( counter ); } inner (); } outer (); outer (); // What is logged to the console? // Line 5 : 1 // Line 6 : 1 Every time a function gets invoked, it gets a brand new local memory which contains all the variables and arguments. When we finish running the function, that temporary memory is pretty much deleted. When we invoke the function again it doesn't remember the data that was stored in the memory from the previous run.","title":"Double incovation"},{"location":"pages/advanced/javascript/closures/#invoke-later","text":"Invoke later 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function outer () { let counter = 0 ; function inner () { counter ++ ; console . log ( counter ); } return inner ; } const fn = outer (); fn (); fn (); // What is logged to the console? // Line 5 : 1 // Line 6 : 2 Closures in JavaScript A closure is the combination of a function bundled together with references to its surrounding state (the lexical environment). Closures are created every time a function is created, at function creation time. In JavaScript, when we return a function from another function, we are effectively returning a combination of the function definition along with the function's scope chain. This would let the function definition have an associated persistent memory which could hold on to live data between executions. Info The combination of the function and its scope chain (lexical environemnt) is what is called a closure in JavaScript.","title":"Invoke later"},{"location":"pages/advanced/javascript/closures/#multiple-closure-instances","text":"function outer () { let counter = 9 function inner () { counter ++ console . log ( counter ) } return inner } const fn1 = outer (); fn1 (); fn1 (); const fn2 = outer (); fn2 (); fn2 (); // What is logged to the console? // fn1 output: 10 11 // fn2 output: 10 11 Info Multiple closure instances don't share the same persistent memory.","title":"Multiple closure instances"},{"location":"pages/advanced/javascript/closures/#exercice-memoization-with-closures","text":"","title":"Exercice: memoization with Closures"},{"location":"pages/advanced/javascript/closures/#implement-optimizedsquare-function","text":"First implementation function square ( num ) { return num * num ; } function memoizedSquare () { let cache = {}; return function optimizedSquare ( num ) { ... } } Final implementation function square ( num ) { return num * num ; } function memoizedSquare () { let cache = {}; return function optimizedSquare ( num ) { if ( num in cache ) { console . log ( 'Returning from cache' ); return cache [ num ]; } else { console . log ( 'Computing square' ); const result = square ( num ); cache [ num ] = result ; return result ; } } }","title":"Implement optimizedSquare function"},{"location":"pages/advanced/javascript/closures/#testing-the-optimizedsquare-memo-closure","text":"Run memoizedSquare const memoSquare = memoizedSquare (); console . log ( memoSquare ( 2 )); console . log ( memoSquare ( 5 )); console . log ( memoSquare ( 5 )); // What is logged to the console? // Computing square 4 // Computing square 25 // Returning from cache 25","title":"Testing the optimizedSquare memo closure"},{"location":"pages/advanced/javascript/closures/#generic-memoization-implementation","text":"memoize function function memoize ( callback ) { let cache = {}; return function (... args ) { const key = args . toString (); if ( key in cache ) { console . log ( \"Returning from cache\" ); return cache [ key ]; } else { console . log ( \"Computing result\" ); const result = callback (... args ); cache [ key ] = result ; return result ; } } } Use the memoize fn with a callback // the callback function add ( a , b ) { return a + b ; } // Create the memo with the callback const memoizedAdd = memoize ( add ); console . log ( memoizedAdd ( 2 , 4 )); console . log ( memoizedAdd ( 2 , 4 )); // What is logged to the console? // Computing result 6 // Returning from cache 6","title":"Generic memoization implementation"},{"location":"pages/advanced/javascript/currying/","text":"Currying and closures function curry ( fn ) { return function ( a ) { return function ( b ) { return function ( c ) { return fn ( a , b , c ); } } } } const sum = ( value1 , value2 , value3 ) => value1 + value2 + value3 ; const curriedSum = curry ( sum ); console . log ( curriedSum ( 2 )( 3 )( 5 )); // output: 10 Currying is possible because of closures. When we return a function from another function, we are returning the function along with its lexical scope. Lexical scope takes the outer function parameters into consideration.","title":"Currying"},{"location":"pages/advanced/javascript/es6-utilities/","text":"Filter Info The filter() method take an arg function with array element like parameter. The function return a boolean filter. An second parameter may be used for element indice. Filter return an array. Simple Example const users = [ 'John' , 'Marc' , 'Mattew' , 'Peter' , 'Paul' ]; const result = users . filter ( user => user . length > 4 ); // return name length > 4 // result return: Array[\"Mattew\", \"Peter\"] const result = users . filter (( user , i ) => i > 2 ); // return indice > 2 // result return: Array[\"Peter\", \"Paul\"] Filter example with an object Intial data const users = { \"admin\" : false , \"user\" : true , \"super\" : true } Output all true data from user object Solution Object . keys ( users ). filter ( ( k ) => { return user [ k ] } ); // Output: [ 'user', 'super' ] shortland solution Object . keys ( users ). filter ( ( k ) => user [ k ] ); // Output: [ 'user', 'super' ] Map Info map take an arg function with array element like parameter. The function must return the new value. An second parameter may be used for element indice. Map return an array. Simple Example const users = [ 'John' , 'Marc' , 'Mattew' , 'Peter' , 'Paul' ]; const result = users . filter ( user => user . length > 4 ); // result return: Array[\"Mattew\", \"Peter\"] const result = users . filter (( user , i ) => i > 2 ); Reduce Info The reduce() method executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. Simple Example const array1 = [ 1 , 2 , 3 , 4 ]; const reducer = array1 . reduce (( acc , element ) => acc + element ); // return 10 const reducer2 = array1 . reduce (( acc , element , i ) => acc + element + i ); // return 16 Reduce Exemple Intial data const pilots = [ { id : 10 , name : \"Peo Dameron\" , years : 30 , }, { id : 2 , name : \"Temin Wexley\" , years : 50 , }, { id : 41 , name : \"Tallissan Lintra\" , years : 13 , }, { id : 99 , name : \"Ello Asty\" , years : 5 , }, ]; Get the lower age pilot const pilot = pilots . reduce ( ( acc , element ) => ( acc . years || 0 ) < element . years ? acc : element ); // Output : { id: 99, name: 'Ello Asty', years: 5} More reduce practices","title":"Es6 utilities"},{"location":"pages/advanced/javascript/es6-utilities/#filter","text":"Info The filter() method take an arg function with array element like parameter. The function return a boolean filter. An second parameter may be used for element indice. Filter return an array. Simple Example const users = [ 'John' , 'Marc' , 'Mattew' , 'Peter' , 'Paul' ]; const result = users . filter ( user => user . length > 4 ); // return name length > 4 // result return: Array[\"Mattew\", \"Peter\"] const result = users . filter (( user , i ) => i > 2 ); // return indice > 2 // result return: Array[\"Peter\", \"Paul\"]","title":"Filter"},{"location":"pages/advanced/javascript/es6-utilities/#filter-example-with-an-object","text":"Intial data const users = { \"admin\" : false , \"user\" : true , \"super\" : true }","title":"Filter example with an object"},{"location":"pages/advanced/javascript/es6-utilities/#output-all-true-data-from-user-object","text":"Solution Object . keys ( users ). filter ( ( k ) => { return user [ k ] } ); // Output: [ 'user', 'super' ] shortland solution Object . keys ( users ). filter ( ( k ) => user [ k ] ); // Output: [ 'user', 'super' ]","title":"Output all true data from user object"},{"location":"pages/advanced/javascript/es6-utilities/#map","text":"Info map take an arg function with array element like parameter. The function must return the new value. An second parameter may be used for element indice. Map return an array. Simple Example const users = [ 'John' , 'Marc' , 'Mattew' , 'Peter' , 'Paul' ]; const result = users . filter ( user => user . length > 4 ); // result return: Array[\"Mattew\", \"Peter\"] const result = users . filter (( user , i ) => i > 2 );","title":"Map"},{"location":"pages/advanced/javascript/es6-utilities/#reduce","text":"Info The reduce() method executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. Simple Example const array1 = [ 1 , 2 , 3 , 4 ]; const reducer = array1 . reduce (( acc , element ) => acc + element ); // return 10 const reducer2 = array1 . reduce (( acc , element , i ) => acc + element + i ); // return 16","title":"Reduce"},{"location":"pages/advanced/javascript/es6-utilities/#reduce-exemple","text":"Intial data const pilots = [ { id : 10 , name : \"Peo Dameron\" , years : 30 , }, { id : 2 , name : \"Temin Wexley\" , years : 50 , }, { id : 41 , name : \"Tallissan Lintra\" , years : 13 , }, { id : 99 , name : \"Ello Asty\" , years : 5 , }, ]; Get the lower age pilot const pilot = pilots . reduce ( ( acc , element ) => ( acc . years || 0 ) < element . years ? acc : element ); // Output : { id: 99, name: 'Ello Asty', years: 5} More reduce practices","title":"Reduce Exemple"},{"location":"pages/advanced/javascript/generator/","text":"What is special about a generator function Normal function function normalFunction () { console . log ( \"Hello\" ); console . log ( \"World\" ); } Run to complemetion model. Output: 'Hello' 'World' Exit by returning or throwing an error. If you call the function again, it will begin the execution from the top. Generator function function * generatorFunction () { yield `Hello` ; yield `World` ; } Warning Do not forget the * after function key : function* generatorFunction() A generator is a function that can stop midway and then continue from where it stopped. A generator function can \"pause\" the execution. To achieve that behaviour, we use the yield keyword. yield is an operator with which a generator can pause itself. Generator yields a value. Invocation Generators Create the Generator function * generatorFunction () { yield `Hello` ; yield `World` ; } const generatorObject = generatorFunction (); Use the Generator for ( const word of generatorObject ) { console . log ( word ); } // Log: Hello world console . log ([... generatorObject ]); // Log: [ 'Hello', 'world' ] generatorObject . next (); // Returns { value: \u2018Hello\u2019, done: false } generatorObject . next (); // Returns { value: \u2018World', done: false } generatorObject . next (); // Returns { value: undefined, done: true }","title":"Generator"},{"location":"pages/advanced/javascript/generator/#what-is-special-about-a-generator-function","text":"Normal function function normalFunction () { console . log ( \"Hello\" ); console . log ( \"World\" ); } Run to complemetion model. Output: 'Hello' 'World' Exit by returning or throwing an error. If you call the function again, it will begin the execution from the top. Generator function function * generatorFunction () { yield `Hello` ; yield `World` ; } Warning Do not forget the * after function key : function* generatorFunction() A generator is a function that can stop midway and then continue from where it stopped. A generator function can \"pause\" the execution. To achieve that behaviour, we use the yield keyword. yield is an operator with which a generator can pause itself. Generator yields a value.","title":"What is special about a generator function"},{"location":"pages/advanced/javascript/generator/#invocation","text":"Generators Create the Generator function * generatorFunction () { yield `Hello` ; yield `World` ; } const generatorObject = generatorFunction (); Use the Generator for ( const word of generatorObject ) { console . log ( word ); } // Log: Hello world console . log ([... generatorObject ]); // Log: [ 'Hello', 'world' ] generatorObject . next (); // Returns { value: \u2018Hello\u2019, done: false } generatorObject . next (); // Returns { value: \u2018World', done: false } generatorObject . next (); // Returns { value: undefined, done: true }","title":"Invocation"},{"location":"pages/advanced/javascript/iterator/","text":"Iterables & Iterators Intro Iterable Protocol - Technical details The iterable protocol decides whether an object is an iterable or not. An object is iterable when it contains a method at the key [Symbol.iterator] that takes no arguments and returns an object which conforms to the iterator protocol. Iterator Protocol - Technical details The iterator protocol decides whether an object is an iterator. An object is an iterator when it satisfies the following rule The object must have a next() method that returns an object with two properties value: which gives the current element done: which is a boolean value indicating whether or not there are any more elements that could be iterated upon Each time you call the next() method, it returns the next value in the collection. { value: 'next value', done: false } // till the last element has been returned { value: undefined, done: true} // after the last element has been returned For..of loop A for..of loop with a string will iterate over the characters in the string for ( const char of str ) { console . log ( char ); } A for..of loop with a map will iterate over the key/value pairs of the map: for ( const [ key , value ] of map ) { console . log ( key + ' = ' + value ); } A for..of loop with an array will iterate over the items in the array: for ( const item of arr ) { console . log ( item ); } A for..of loop with a set will iterate over the values in the set: for ( const value of set ){ console . log ( value ); } Iterables & Iterators examples Basic example Create the iterator const range = { [ Symbol . iterator ] : () => { let counter = 1 ; const iterator = { next : () => { const result = { value : counter , done : false }; if ( counter <= 50 ) { counter ++ ; return result ; } return { done : true }; } } return iterator ; } } Use iterator for ( const num of range ) { console . log ( num ); } // output: 1 2 3 ... 50 console . log ([... range ]); // output: [ 1, 2, 3, ...50 ] Our range iterable logs numbers from 1 to 50 when we have the default iteration with the for..of loop. Customize the iteration behaviour. Pass three values namely start, end and interval. Print the range starting from start value till the end value with interval size increments. start=10, end=20 and interval = 2 logs10, 12, 14, 16, 18 and 20 in the console. Example with next() and return() The iterator object const customRange = { [ Symbol . iterator ] : ( start = 1 , end = 50 , interval = 1 ) => { let counter = start ; const iterator = { next : () => { const result = { value : counter , done : false }; if ( counter <= end ) { counter += interval ; return result ; } return { done : true }; } } return iterator ; } } Use the iterator object for ( const num of customRange ) { if ( num > 10 ) { break ; } console . log ( num ); } // Output : 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 Info Note that the return method is invoked when the iteration is stopped prematurely Iterator object use with for for ( const num of customRange ) { console . log ( num ); } // Output : 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 50 console . log ([ ... customRange ]); // Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, ... 50 ] Iterator object use with while const iterator2 = customRange [ Symbol . iterator ]( 10 , 20 , 2 ); let result = iterator2 . next (); while ( ! result . done ) { console . log ( result . value ); result = iterator2 . next (); } // output: 10 12 14 16 18 20 Iterator object use with next const iterator = customRange [ Symbol . iterator ]( 10 , 20 , 2 ); iterator . next (); // output : { value: 10, done: false } iterator . next (); // output : { value: 12, done: false } iterator . next (); // output : { value: 14, done: false } iterator . next (); // output : { value: 16, done: false } iterator . next (); // output : { value: 18, done: false } iterator . next (); // output : { value: 20, done: false }","title":"Iterables & Iterators"},{"location":"pages/advanced/javascript/iterator/#iterables-iterators","text":"","title":"Iterables &amp; Iterators"},{"location":"pages/advanced/javascript/iterator/#intro","text":"","title":"Intro"},{"location":"pages/advanced/javascript/iterator/#iterable-protocol-technical-details","text":"The iterable protocol decides whether an object is an iterable or not. An object is iterable when it contains a method at the key [Symbol.iterator] that takes no arguments and returns an object which conforms to the iterator protocol.","title":"Iterable Protocol - Technical details"},{"location":"pages/advanced/javascript/iterator/#iterator-protocol-technical-details","text":"The iterator protocol decides whether an object is an iterator. An object is an iterator when it satisfies the following rule The object must have a next() method that returns an object with two properties value: which gives the current element done: which is a boolean value indicating whether or not there are any more elements that could be iterated upon Each time you call the next() method, it returns the next value in the collection. { value: 'next value', done: false } // till the last element has been returned { value: undefined, done: true} // after the last element has been returned","title":"Iterator Protocol - Technical details"},{"location":"pages/advanced/javascript/iterator/#forof-loop","text":"A for..of loop with a string will iterate over the characters in the string for ( const char of str ) { console . log ( char ); } A for..of loop with a map will iterate over the key/value pairs of the map: for ( const [ key , value ] of map ) { console . log ( key + ' = ' + value ); } A for..of loop with an array will iterate over the items in the array: for ( const item of arr ) { console . log ( item ); } A for..of loop with a set will iterate over the values in the set: for ( const value of set ){ console . log ( value ); }","title":"For..of loop"},{"location":"pages/advanced/javascript/iterator/#iterables-iterators-examples","text":"","title":"Iterables &amp; Iterators examples"},{"location":"pages/advanced/javascript/iterator/#basic-example","text":"Create the iterator const range = { [ Symbol . iterator ] : () => { let counter = 1 ; const iterator = { next : () => { const result = { value : counter , done : false }; if ( counter <= 50 ) { counter ++ ; return result ; } return { done : true }; } } return iterator ; } } Use iterator for ( const num of range ) { console . log ( num ); } // output: 1 2 3 ... 50 console . log ([... range ]); // output: [ 1, 2, 3, ...50 ] Our range iterable logs numbers from 1 to 50 when we have the default iteration with the for..of loop. Customize the iteration behaviour. Pass three values namely start, end and interval. Print the range starting from start value till the end value with interval size increments. start=10, end=20 and interval = 2 logs10, 12, 14, 16, 18 and 20 in the console.","title":"Basic example"},{"location":"pages/advanced/javascript/iterator/#example-with-next-and-return","text":"The iterator object const customRange = { [ Symbol . iterator ] : ( start = 1 , end = 50 , interval = 1 ) => { let counter = start ; const iterator = { next : () => { const result = { value : counter , done : false }; if ( counter <= end ) { counter += interval ; return result ; } return { done : true }; } } return iterator ; } } Use the iterator object for ( const num of customRange ) { if ( num > 10 ) { break ; } console . log ( num ); } // Output : 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 Info Note that the return method is invoked when the iteration is stopped prematurely Iterator object use with for for ( const num of customRange ) { console . log ( num ); } // Output : 1, 2, 3, 4, 5, 6, 7, 8, 9, ... 50 console . log ([ ... customRange ]); // Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, ... 50 ] Iterator object use with while const iterator2 = customRange [ Symbol . iterator ]( 10 , 20 , 2 ); let result = iterator2 . next (); while ( ! result . done ) { console . log ( result . value ); result = iterator2 . next (); } // output: 10 12 14 16 18 20 Iterator object use with next const iterator = customRange [ Symbol . iterator ]( 10 , 20 , 2 ); iterator . next (); // output : { value: 10, done: false } iterator . next (); // output : { value: 12, done: false } iterator . next (); // output : { value: 14, done: false } iterator . next (); // output : { value: 16, done: false } iterator . next (); // output : { value: 18, done: false } iterator . next (); // output : { value: 20, done: false }","title":"Example with next() and return()"},{"location":"pages/advanced/javascript/map/","text":"Map object Intro The Map object in JavaScript holds key-value pairs (similar to an object). const map = new Map (); To add key value pairs use the set method passing in key and value as its arguments. const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); To check the number of key value pairs in the map, use the size property. const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); map . size ; // -> Returns 2 To get the value at a particular key, use the get method passing in key as the argument. map . get ( 'firstName' ); // -> Returns 'Bruce'; map . get ( 'lastName' ); // -> Returns 'Wayne'; To check if a key exists in the map, use the has method. map . has ( 'firstName' ); // -> Returns true map . has ( 'fullName' ); //-> Returns false To remove a key value pair from the map, use the delete method passing in the key.\"To delete all the key value pairs in the map, use the clear method map . delete ( 'firstName' ); // -> Returns true map . delete ( \u2018 fullName ' ); // -> Returns false map . clear (); map . size ; // -> Returns 2 Map array conversion 2D array to map const personArr = [ [ 'firstName' , 'Bruce' ], [ 'lastName' , 'Wayne' ] ]; const personMap = new Map ( personArr ); Map to array const map = new Map () map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); const arr = Array . from ( map ); for in Map Iterating over a Map const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); Iterate over key-value pairs for ( let [ key , value ] of map ) { console . log ( key + ' = \u2018 + value ); } Iterate over keys only for ( let key of map . keys ()) { console . log ( key ); } Iterate over values only for ( let value of map . values ()) { console . log ( value ); } Map VS object 1. key type Info A Map's keys can be any value (including functions, objects, or any primitive). The keys of an Object however must be either a String or a Symbol. const keyString = 'a string' ; const keyObj = {}; const keyFunc = function () {}; myMap . set ( keyString , 'String key value' ); myMap . set ( keyObj , 'Object key value' ); myMap . set ( keyFunc , 'Function key value' ); 2. Accidental keys A Map does not contain any keys by default. An Object however has a prototype, so it contains default keys. 3. Identifying the size Number of items in a Map is easily retrieved from its 'size' property. The number of items in an Object however, must be determined manually. 4. Iteration behaviour Map is an iterable so it can directly be iterated Iterating over an Object however requires obtaining its keys in some fashion and then iterating over them.","title":"Map object"},{"location":"pages/advanced/javascript/map/#map-object","text":"","title":"Map object"},{"location":"pages/advanced/javascript/map/#intro","text":"The Map object in JavaScript holds key-value pairs (similar to an object). const map = new Map (); To add key value pairs use the set method passing in key and value as its arguments. const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); To check the number of key value pairs in the map, use the size property. const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); map . size ; // -> Returns 2 To get the value at a particular key, use the get method passing in key as the argument. map . get ( 'firstName' ); // -> Returns 'Bruce'; map . get ( 'lastName' ); // -> Returns 'Wayne'; To check if a key exists in the map, use the has method. map . has ( 'firstName' ); // -> Returns true map . has ( 'fullName' ); //-> Returns false To remove a key value pair from the map, use the delete method passing in the key.\"To delete all the key value pairs in the map, use the clear method map . delete ( 'firstName' ); // -> Returns true map . delete ( \u2018 fullName ' ); // -> Returns false map . clear (); map . size ; // -> Returns 2","title":"Intro"},{"location":"pages/advanced/javascript/map/#map-array-conversion","text":"2D array to map const personArr = [ [ 'firstName' , 'Bruce' ], [ 'lastName' , 'Wayne' ] ]; const personMap = new Map ( personArr ); Map to array const map = new Map () map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); const arr = Array . from ( map );","title":"Map array conversion"},{"location":"pages/advanced/javascript/map/#for-in-map","text":"Iterating over a Map const map = new Map (); map . set ( 'firstName' , 'Bruce' ); map . set ( 'lastName' , 'Wayne' ); Iterate over key-value pairs for ( let [ key , value ] of map ) { console . log ( key + ' = \u2018 + value ); } Iterate over keys only for ( let key of map . keys ()) { console . log ( key ); } Iterate over values only for ( let value of map . values ()) { console . log ( value ); }","title":"for in Map"},{"location":"pages/advanced/javascript/map/#map-vs-object","text":"","title":"Map VS object"},{"location":"pages/advanced/javascript/map/#1-key-type","text":"Info A Map's keys can be any value (including functions, objects, or any primitive). The keys of an Object however must be either a String or a Symbol. const keyString = 'a string' ; const keyObj = {}; const keyFunc = function () {}; myMap . set ( keyString , 'String key value' ); myMap . set ( keyObj , 'Object key value' ); myMap . set ( keyFunc , 'Function key value' );","title":"1. key type"},{"location":"pages/advanced/javascript/map/#2-accidental-keys","text":"A Map does not contain any keys by default. An Object however has a prototype, so it contains default keys.","title":"2. Accidental keys"},{"location":"pages/advanced/javascript/map/#3-identifying-the-size","text":"Number of items in a Map is easily retrieved from its 'size' property. The number of items in an Object however, must be determined manually.","title":"3. Identifying the size"},{"location":"pages/advanced/javascript/map/#4-iteration-behaviour","text":"Map is an iterable so it can directly be iterated Iterating over an Object however requires obtaining its keys in some fashion and then iterating over them.","title":"4. Iteration behaviour"},{"location":"pages/advanced/javascript/promise/","text":"Promise intro How to execute callback functions based on the status change? Promise Resolve scenario const promise1 = new Promise (( resolve , reject ) => { setTimeout (() => { // Food truck found // Change status from \u2018pending\u2019 to 'fulfilled' resolve ( \"Bringing tacos\" ) }, 5000 ); }); Promise Reject scenario const promise2 = new Promise (( resolve , reject ) => { setTimeout (() => { // Food truck not found // Change status from \u2018pending\u2019 to 'rejected' reject ( 'Not bringing tacos. Food truck not there.' ); }, 5000 ); }); Success and failure callbacks const onFullfillment = ( result ) => { // resolve was called console . log ( result ); console . log ( 'Set up the table to eat tacos' ); } const onRejection = ( error ) => { // reject was called console . log ( error ); console . log ( 'Start cooking pasta' ); } promise1 . then ( onFullfillment ); promise2 . catch ( onRejection ); console log result 'Bringing tacos' 'Set up the table to eat tacos' ------------------------------- 'Cannot bring tacos' 'Start cooking pasta' Promise then() function Version 1 Encouraged approach Even if your onFulfillment callback throws an exception, it is caught and then you can handle that exception gracefully then() and catch() functions const promise = new Promise (( resolve , reject ) => { resolve () or reject () }); promise . then ( onFulfillment ); promise . catch ( onRejection ); Version 2 onRejection callback handles error from only the Promise. If your callback functions itself throws an error or exception, there is no code to handle that. then() function const promise = new Promise (( resolve , reject ) => { resolve () or reject () }); promise . then ( onFulfillment , onRejection ) Chaining Promise Chaining Promises const promise = new Promise (( resolve , reject ) => { resolve () or reject (); } promise . then ( onFulfillment ). catch ( onRejection ); Both then and catch methods return promises. then() and catch() methods can be chained in JavaScript. Promise Static methods Promise.all() Query multiple APIs and perform some actions but only after all the APIs have finished loading. const promise1 = Promise . resolve ( 3 ); const promise2 = 42 ; const promise3 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 1000 , \"foo\" ); }); Promise . all ([ promise1 , promise2 , promise3 ]) . then (( values ) => { console . log ( values ); }); // output: [ 3, 42, 'foo' ] after 1 sec The Promise.all() method takes an iterable of promises as an input and returns. single Promise that resolves to an array of the results of the input promises. Promise.race() The Promise.race() method returns a promise that fulfills or rejects as soon as one of the input promises fulfills or rejects, with the value or reason from that promise. const promise1 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 500 , 'one' ); }); const promise2 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 100 , 'two' ); }); Promise . race ([ promise1 , promise2 ]). then (( value ) => { console . log ( value ); // both resolve but promise2 is faster }); // output: 'two' Promise.allSettled() Promise.allSettled() waits for all input promises to complete regardless of whether or not one of them is rejected. const promise1 = Promise . resolve ( 3 ); const promise2 = 42 ; const promise3 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 1908 , 'foo' ); }); Promise . allSettled ([ promise1 , promise2 , promise3 ]). then (( values ) => { console . log ( values ); }); //output: [ 3, 42, \"foo\" ] /* [ { status: 'fulfilled', value: 3 }, { status: 'fulfilled', value: 42 }, { status: 'fulfilled', value: 'foo' } ] */ Bonus Promise with for..of Ouput the user ID with 1000 ms delay one per one // Create the promise with timeout const getUserID = ( id ) => { return new Promise ( ( resolve ) => { setTimeout (() => { console . log ( `Got user ID ${ id } ` ); resolve ( id ); }, 1000 ); }) } ( async function () { const users = [ 30 , 20 , 10 , 5 , 1 ]; for ( const user of users ) { await getUserID ( user ) } })() // output at 1000 ms frequence one per one the users (5 x 1000 ms): // 'Got user ID 30' >1000 ms // 'Got user ID 20' >1000 ms // 'Got user ID 10' >1000 ms // 'Got user ID 5' >1000 ms // 'Got user ID 1' >1000 ms Promise with forEach, map or for // with forEach, map, for, it run in parrallels users . forEach ( async ( user ) => { await getUserID ( user ) }) // output with 1000 ms delay All the users in one time:","title":"Promise intro"},{"location":"pages/advanced/javascript/promise/#promise-intro","text":"How to execute callback functions based on the status change? Promise Resolve scenario const promise1 = new Promise (( resolve , reject ) => { setTimeout (() => { // Food truck found // Change status from \u2018pending\u2019 to 'fulfilled' resolve ( \"Bringing tacos\" ) }, 5000 ); }); Promise Reject scenario const promise2 = new Promise (( resolve , reject ) => { setTimeout (() => { // Food truck not found // Change status from \u2018pending\u2019 to 'rejected' reject ( 'Not bringing tacos. Food truck not there.' ); }, 5000 ); }); Success and failure callbacks const onFullfillment = ( result ) => { // resolve was called console . log ( result ); console . log ( 'Set up the table to eat tacos' ); } const onRejection = ( error ) => { // reject was called console . log ( error ); console . log ( 'Start cooking pasta' ); } promise1 . then ( onFullfillment ); promise2 . catch ( onRejection ); console log result 'Bringing tacos' 'Set up the table to eat tacos' ------------------------------- 'Cannot bring tacos' 'Start cooking pasta'","title":"Promise intro"},{"location":"pages/advanced/javascript/promise/#promise-then-function","text":"","title":"Promise then() function"},{"location":"pages/advanced/javascript/promise/#version-1","text":"Encouraged approach Even if your onFulfillment callback throws an exception, it is caught and then you can handle that exception gracefully then() and catch() functions const promise = new Promise (( resolve , reject ) => { resolve () or reject () }); promise . then ( onFulfillment ); promise . catch ( onRejection );","title":"Version 1"},{"location":"pages/advanced/javascript/promise/#version-2","text":"onRejection callback handles error from only the Promise. If your callback functions itself throws an error or exception, there is no code to handle that. then() function const promise = new Promise (( resolve , reject ) => { resolve () or reject () }); promise . then ( onFulfillment , onRejection )","title":"Version 2"},{"location":"pages/advanced/javascript/promise/#chaining-promise","text":"Chaining Promises const promise = new Promise (( resolve , reject ) => { resolve () or reject (); } promise . then ( onFulfillment ). catch ( onRejection ); Both then and catch methods return promises. then() and catch() methods can be chained in JavaScript.","title":"Chaining Promise"},{"location":"pages/advanced/javascript/promise/#promise-static-methods","text":"","title":"Promise Static methods"},{"location":"pages/advanced/javascript/promise/#promiseall","text":"Query multiple APIs and perform some actions but only after all the APIs have finished loading. const promise1 = Promise . resolve ( 3 ); const promise2 = 42 ; const promise3 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 1000 , \"foo\" ); }); Promise . all ([ promise1 , promise2 , promise3 ]) . then (( values ) => { console . log ( values ); }); // output: [ 3, 42, 'foo' ] after 1 sec The Promise.all() method takes an iterable of promises as an input and returns. single Promise that resolves to an array of the results of the input promises.","title":"Promise.all()"},{"location":"pages/advanced/javascript/promise/#promiserace","text":"The Promise.race() method returns a promise that fulfills or rejects as soon as one of the input promises fulfills or rejects, with the value or reason from that promise. const promise1 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 500 , 'one' ); }); const promise2 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 100 , 'two' ); }); Promise . race ([ promise1 , promise2 ]). then (( value ) => { console . log ( value ); // both resolve but promise2 is faster }); // output: 'two'","title":"Promise.race()"},{"location":"pages/advanced/javascript/promise/#promiseallsettled","text":"Promise.allSettled() waits for all input promises to complete regardless of whether or not one of them is rejected. const promise1 = Promise . resolve ( 3 ); const promise2 = 42 ; const promise3 = new Promise (( resolve , reject ) => { setTimeout ( resolve , 1908 , 'foo' ); }); Promise . allSettled ([ promise1 , promise2 , promise3 ]). then (( values ) => { console . log ( values ); }); //output: [ 3, 42, \"foo\" ] /* [ { status: 'fulfilled', value: 3 }, { status: 'fulfilled', value: 42 }, { status: 'fulfilled', value: 'foo' } ] */","title":"Promise.allSettled()"},{"location":"pages/advanced/javascript/promise/#bonus","text":"","title":"Bonus"},{"location":"pages/advanced/javascript/promise/#promise-with-forof","text":"Ouput the user ID with 1000 ms delay one per one // Create the promise with timeout const getUserID = ( id ) => { return new Promise ( ( resolve ) => { setTimeout (() => { console . log ( `Got user ID ${ id } ` ); resolve ( id ); }, 1000 ); }) } ( async function () { const users = [ 30 , 20 , 10 , 5 , 1 ]; for ( const user of users ) { await getUserID ( user ) } })() // output at 1000 ms frequence one per one the users (5 x 1000 ms): // 'Got user ID 30' >1000 ms // 'Got user ID 20' >1000 ms // 'Got user ID 10' >1000 ms // 'Got user ID 5' >1000 ms // 'Got user ID 1' >1000 ms","title":"Promise with for..of"},{"location":"pages/advanced/javascript/promise/#promise-with-foreach-map-or-for","text":"// with forEach, map, for, it run in parrallels users . forEach ( async ( user ) => { await getUserID ( user ) }) // output with 1000 ms delay All the users in one time:","title":"Promise with forEach, map or for"},{"location":"pages/advanced/javascript/reduce-cases/","text":"Calculate price basket Initial object const caddie = [ { book : 1 , price : 19.99 }, { beer : 6 , price : 4.5 }, { bread : 1 , price : 1.2 } ]; Calculate the caddie price const price = caddie . reduce (( acc , curr ) => acc + curr . price , 0 ); console . log ( price . toFixed ( 2 )); // 25.69 Reformat data in object Initial object const musicians = [ { id : 12345 , firstName : \"Stevie\" , lastName : \"Tay Vaughn\" , instrument : \"Guitar\" }, { id : 8877 , firstName : \"Jaco\" , lastName : \"Pastorius Vaughn\" , instrument : \"Bass Guitar\" }, { id : 87 , firstName : \"Mitch\" , lastName : \"Micthele\" , instrument : \"Drums\" } ]; Tip Its Easier to call the date by the ID in a object (instead of search) : Get musicians list const musiciansList = musicians . reduce (( acc , curr ) => { const { id , ... othersProps } = curr ; acc [ id ] = othersProps ; return acc ; }, {}); console . log ( musiciansList ); // return { 87:{...}, 8877:{...}, 12345:{...} } console . log ( musiciansList [ 87 ]); // return Micth object Calculate the number of pizzas Initial object const pizzas = [ { userName : \"Bob\" , pizzaName : \"Marguarita\" , qty : 1 }, { userName : \"Sam\" , pizzaName : \"Veggie\" , qty : 2 }, { userName : \"John\" , pizzaName : \"Regina\" , qty : 3 }, { userName : \"Kim\" , pizzaName : \"Regina\" , qty : 1 }, { userName : \"James\" , pizzaName : \"Calzone\" , qty : 1 }, { userName : \"Morley\" , pizzaName : \"Marguarita\" , qty : 5 } ]; Tip Give the number of pizza per type : const pizzaPerType = pizzas . reduce (( acc , curr ) => { if ( Object . keys ( acc ). includes ( curr . pizzaName )) { acc [ curr . pizzaName ] += curr . qty ; } else { acc [ curr . pizzaName ] = curr . qty ; } return acc ; }, {}); console . log ( pizzaPerType ); // Output : { Marguarita: 6, Veggie: 2, Regina: 4, Calzone: 1 }","title":"Reduce cases"},{"location":"pages/advanced/javascript/reduce-cases/#calculate-price-basket","text":"Initial object const caddie = [ { book : 1 , price : 19.99 }, { beer : 6 , price : 4.5 }, { bread : 1 , price : 1.2 } ]; Calculate the caddie price const price = caddie . reduce (( acc , curr ) => acc + curr . price , 0 ); console . log ( price . toFixed ( 2 )); // 25.69","title":"Calculate price basket"},{"location":"pages/advanced/javascript/reduce-cases/#reformat-data-in-object","text":"Initial object const musicians = [ { id : 12345 , firstName : \"Stevie\" , lastName : \"Tay Vaughn\" , instrument : \"Guitar\" }, { id : 8877 , firstName : \"Jaco\" , lastName : \"Pastorius Vaughn\" , instrument : \"Bass Guitar\" }, { id : 87 , firstName : \"Mitch\" , lastName : \"Micthele\" , instrument : \"Drums\" } ]; Tip Its Easier to call the date by the ID in a object (instead of search) : Get musicians list const musiciansList = musicians . reduce (( acc , curr ) => { const { id , ... othersProps } = curr ; acc [ id ] = othersProps ; return acc ; }, {}); console . log ( musiciansList ); // return { 87:{...}, 8877:{...}, 12345:{...} } console . log ( musiciansList [ 87 ]); // return Micth object","title":"Reformat data in object"},{"location":"pages/advanced/javascript/reduce-cases/#calculate-the-number-of-pizzas","text":"Initial object const pizzas = [ { userName : \"Bob\" , pizzaName : \"Marguarita\" , qty : 1 }, { userName : \"Sam\" , pizzaName : \"Veggie\" , qty : 2 }, { userName : \"John\" , pizzaName : \"Regina\" , qty : 3 }, { userName : \"Kim\" , pizzaName : \"Regina\" , qty : 1 }, { userName : \"James\" , pizzaName : \"Calzone\" , qty : 1 }, { userName : \"Morley\" , pizzaName : \"Marguarita\" , qty : 5 } ]; Tip Give the number of pizza per type : const pizzaPerType = pizzas . reduce (( acc , curr ) => { if ( Object . keys ( acc ). includes ( curr . pizzaName )) { acc [ curr . pizzaName ] += curr . qty ; } else { acc [ curr . pizzaName ] = curr . qty ; } return acc ; }, {}); console . log ( pizzaPerType ); // Output : { Marguarita: 6, Veggie: 2, Regina: 4, Calzone: 1 }","title":"Calculate the number of pizzas"},{"location":"pages/advanced/javascript/set/","text":"Set intro The Set object in JavaScript lets you store unique values of any type. const set = new Set (); To append values to the Set object, use the add method passsing in the value as its argument. const set = new Set (); set . add ( 1 ); set . add ( 2 ); set . add ( 1 ); // -> Does not get added To check the number of values in the set, you can use the size property. const set = new Set (); set . add ( 1 ); set . add ( 2 ); set . size ; // -> Returns 2 To check if a value exists in the set, use the has method. set . has ( 1 ); // -> Returns true set . has ( 5 ); // -> Returns false To remove a value from the set, use the delete method passing in the value. To delete all the values in the set, use the clear method. set . delete ( 1 ); // -> Returns true set . delete ( 5 ); // -> Returns false set . clear (); set . size ; // -> Returns 0 Set and Array Conversion Array to Set const numArr = [ 1 , 2 ]; const numSet = new Set ([ numArr ]); Set to Array const numArr = [ 1 , 2 ]; const numSet = new Set ( numArr ); // just deconstruct set [... numSet ] Iterating over a Set const set = new Set (); set . add ( 1 ); set . add ( 2 ); for ( let value of set ) { console . log ( value ); } // output: 1 2","title":"Set"},{"location":"pages/advanced/javascript/set/#set-intro","text":"The Set object in JavaScript lets you store unique values of any type. const set = new Set (); To append values to the Set object, use the add method passsing in the value as its argument. const set = new Set (); set . add ( 1 ); set . add ( 2 ); set . add ( 1 ); // -> Does not get added To check the number of values in the set, you can use the size property. const set = new Set (); set . add ( 1 ); set . add ( 2 ); set . size ; // -> Returns 2 To check if a value exists in the set, use the has method. set . has ( 1 ); // -> Returns true set . has ( 5 ); // -> Returns false To remove a value from the set, use the delete method passing in the value. To delete all the values in the set, use the clear method. set . delete ( 1 ); // -> Returns true set . delete ( 5 ); // -> Returns false set . clear (); set . size ; // -> Returns 0","title":"Set intro"},{"location":"pages/advanced/javascript/set/#set-and-array-conversion","text":"Array to Set const numArr = [ 1 , 2 ]; const numSet = new Set ([ numArr ]); Set to Array const numArr = [ 1 , 2 ]; const numSet = new Set ( numArr ); // just deconstruct set [... numSet ]","title":"Set and Array Conversion"},{"location":"pages/advanced/javascript/set/#iterating-over-a-set","text":"const set = new Set (); set . add ( 1 ); set . add ( 2 ); for ( let value of set ) { console . log ( value ); } // output: 1 2","title":"Iterating over a Set"},{"location":"pages/advanced/javascript/setinterval/","text":"Timeouts & Intervals setinterval() The setinterval() function repeatedly runs the same code over and over again at regular intervals. setInterval ( function , duration , param1 , param2 , ...); The first parameter is the code to execute. *The second parameter is the duration in milliseconds. After the second parameter, you can pass in zero or more values that represent any parameters you want to pass to the function when it is run. function greet () { console . log ( \"Hello\" ); } setInterval ( greet , 20090 ) // -> Logs \u2018Hello\u2019 every 2 seconds clearInterval() Intervals keep running a task forever so you should clear the interval when appropriate. const intervalId = setInterval ( greet , 2000 , 'Vishwas' ); clearInterval ( intervalId ); setInterval & setTimeOut: Noteworthy points It is possible to achieve the same effect as setinterval with a recursive setTimeout. setTimeout ( function run () { console . log ( 'Hello' ) setTimeout ( run , 100 ); }, 100 ); // output 'Hello' to endless loop each 100ms Duration is guaranteed between executions: Irrespective of how long the code takes to run, the interval will remain the same. Code can take longer to run the the time interval itself? Recursive setTimeout . You can calculate a different delay before running each iteration. setInterval ( () => { console . log ( \u2018 Hello \u2019 ) }, 100 ); The duration interval includes the time taken to execute the code you want to run: The code takes 40ms to run, the interval is 60ms The code takes 50ms to run, the interval is 50ms setinterval is always a fixed interval duration","title":"Timeouts & Intervals"},{"location":"pages/advanced/javascript/setinterval/#timeouts-intervals","text":"","title":"Timeouts &amp; Intervals"},{"location":"pages/advanced/javascript/setinterval/#setinterval","text":"The setinterval() function repeatedly runs the same code over and over again at regular intervals. setInterval ( function , duration , param1 , param2 , ...); The first parameter is the code to execute. *The second parameter is the duration in milliseconds. After the second parameter, you can pass in zero or more values that represent any parameters you want to pass to the function when it is run. function greet () { console . log ( \"Hello\" ); } setInterval ( greet , 20090 ) // -> Logs \u2018Hello\u2019 every 2 seconds","title":"setinterval()"},{"location":"pages/advanced/javascript/setinterval/#clearinterval","text":"Intervals keep running a task forever so you should clear the interval when appropriate. const intervalId = setInterval ( greet , 2000 , 'Vishwas' ); clearInterval ( intervalId );","title":"clearInterval()"},{"location":"pages/advanced/javascript/setinterval/#setinterval-settimeout-noteworthy-points","text":"It is possible to achieve the same effect as setinterval with a recursive setTimeout. setTimeout ( function run () { console . log ( 'Hello' ) setTimeout ( run , 100 ); }, 100 ); // output 'Hello' to endless loop each 100ms Duration is guaranteed between executions: Irrespective of how long the code takes to run, the interval will remain the same. Code can take longer to run the the time interval itself? Recursive setTimeout . You can calculate a different delay before running each iteration. setInterval ( () => { console . log ( \u2018 Hello \u2019 ) }, 100 ); The duration interval includes the time taken to execute the code you want to run: The code takes 40ms to run, the interval is 60ms The code takes 50ms to run, the interval is 50ms setinterval is always a fixed interval duration","title":"setInterval &amp; setTimeOut: Noteworthy points"},{"location":"pages/advanced/javascript/this-examples/","text":"Binding args example bind method with arguments function bind ( fn , context ) { return function () { fn . apply ( context , [... arguments ]); } } Question What is logged to the console? // use the bind previous function code const person = { name : 'Vishwas' } function sayMyName ( lastname ) { console . log ( `My name is ${ this . name } ${ lastname } ` ); } const boundFn = bind ( sayMyName , person ); boundFn ( 'Batman' ); Answer Line 6 : 'My name is Vishwas Batman' Explicit binding example Question What is logged to the console? const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } const sayMyNameVishwas = sayMyName . bind ( person ) sayMyNameVishwas () Answer Line 6 : My name is Vishwas (Explicit binding) Implicit binding example Question What is logged to the console? const person = { name : 'Vishwas' , sayMyName () { console . log ( `My name is ${ this . name } ` ); }, superHero : { name : 'Batman' , sayMyName () { console . log ( `My name is ${ this . name } ` ); } } } person . superHero . sayMyName (); Answer Line 4: Batman (implicit binding)","title":"This examples"},{"location":"pages/advanced/javascript/this-examples/#binding-args-example","text":"bind method with arguments function bind ( fn , context ) { return function () { fn . apply ( context , [... arguments ]); } } Question What is logged to the console? // use the bind previous function code const person = { name : 'Vishwas' } function sayMyName ( lastname ) { console . log ( `My name is ${ this . name } ${ lastname } ` ); } const boundFn = bind ( sayMyName , person ); boundFn ( 'Batman' ); Answer Line 6 : 'My name is Vishwas Batman'","title":"Binding args example"},{"location":"pages/advanced/javascript/this-examples/#explicit-binding-example","text":"Question What is logged to the console? const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } const sayMyNameVishwas = sayMyName . bind ( person ) sayMyNameVishwas () Answer Line 6 : My name is Vishwas (Explicit binding)","title":"Explicit binding example"},{"location":"pages/advanced/javascript/this-examples/#implicit-binding-example","text":"Question What is logged to the console? const person = { name : 'Vishwas' , sayMyName () { console . log ( `My name is ${ this . name } ` ); }, superHero : { name : 'Batman' , sayMyName () { console . log ( `My name is ${ this . name } ` ); } } } person . superHero . sayMyName (); Answer Line 4: Batman (implicit binding)","title":"Implicit binding example"},{"location":"pages/advanced/javascript/this/","text":"this with Arrow fonction Question What is logged to the console in this code? Lexical binding const person = { firstName : 'Vishwas' , lastName : 'Batman' , sayMyName () { const fullName = () => { return ` ${ this . firstName } ${ this . lastName } ` ; } console . log ( `Full name is ${ fullName () } ` ); } } person . sayMyName (); Answer Line 8: 'Full name is Vishwas Batman' Unlike normal functions, an arrow function does not define a this keyword at all. this keyword in an arrow function behaves like any other variable. It is going to lexically resolve to an enclosing scope that does define this keyword. this without Arrow fonction Question What is logged to the console in this code? const person = { firstName : 'Vishwas' , lastName : 'Batman' , sayMyName () { const fullName = function () { return ` ${ this . firstName } ${ this . lastName } ` ; } console . log ( `Full name is ${ fullName () } ` ); } } person . sayMyName (); Answer Line 8: 'Full name is undefined undefined' Problem is that implicit binding is on the sayMyName function Within sayMyName, this points to the person object On line 8, fullName() has no implicit, explicit or new binding Defaults to global binding Within the fullName function, this points to the window object In the global scope, we don't have any variables called firstName or lastName this with new Binding We can invoke a function with the 'new' keyword. In such a scenario, the function is invoked with this referencing an empty object. function Person ( name ) { // constructor function this . name = name ; } const pl = new Person ( 'Vishwas' ); const p2 = new Person ( 'Batman' ); When we invoke a function with the new keyword, JavaScript under the hood will create a new empty object that 'this' keyword will reference to. Add properties to that object using this followed by the dot notation. When a function is invoked with the new keyword, within that function this keyword will always reference a new empty object. this Implicit Binding const person = { name : 'Vishwas' , sayMyName () { console . log ( `My name is ${ this . name } ` ); } }; person . sayMyName (); // -> 'My name is Vishwas' When a function is invoked with the dot notation, the object to the left of that dot is what the this keyword is referencing. this keyword is referencing the person object. this with Object : implicit Binding Fallback if none of the other three rules are matched. function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName () // My name is undefined var name = 'Vishwas' ; function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName (); // My name is Vishwas Important If none of the three rules are satisfied, JavaScript will default to the global scope and set this keyword to the window object. this with bind Explicit Binding const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } // -> 'My name is ' Bind works similar to the call method but instead of invoking the function, it returns a new function that you can invoke whenever you wish to. Bind method const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } const sayMyNameVishwas = sayMyName . bind ( person , 'Chess' , 'Football' ); sayMyNameVishwas (); // -> My name is Vishwas. I'm interested in Chess and Football this with call Every function has a built in method named call which allows you to specify the context with which a function is invoked. call method const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName . call ( person ); // -> 'My name is Vishwas' The first argument passed to call is what this keyword inside sayMyName is referencing. If you want to specify arguments to your function, you can pass them in after the first argument to call. const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } sayMyName . call ( person , 'Chess' , 'Football' ); // -> My name is Vishwas. I'm interested in Chess and Football this with apply Every function has a built in method named apply which allows you to specify the context with which a function is invoked. apply method const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName . apply ( person ); // -> 'My name is Vishwas' The first argument passed to apply is what this keyword inside sayMyName is referencing. apply expects an array as its second argument. const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } sayMyName . apply ( person , [ 'Chess' , 'Football' ]); // -> My name is Vishwas. I'm interested in Chess and Football this apply vs call call takes in a comma separated arguments. apply takes in array as arguments. c all : c omma a pply : a rray Important call and apply which invoke a function right away with the context you have specified.","title":"This"},{"location":"pages/advanced/javascript/this/#this-with-arrow-fonction","text":"Question What is logged to the console in this code? Lexical binding const person = { firstName : 'Vishwas' , lastName : 'Batman' , sayMyName () { const fullName = () => { return ` ${ this . firstName } ${ this . lastName } ` ; } console . log ( `Full name is ${ fullName () } ` ); } } person . sayMyName (); Answer Line 8: 'Full name is Vishwas Batman' Unlike normal functions, an arrow function does not define a this keyword at all. this keyword in an arrow function behaves like any other variable. It is going to lexically resolve to an enclosing scope that does define this keyword.","title":"this with Arrow fonction"},{"location":"pages/advanced/javascript/this/#this-without-arrow-fonction","text":"Question What is logged to the console in this code? const person = { firstName : 'Vishwas' , lastName : 'Batman' , sayMyName () { const fullName = function () { return ` ${ this . firstName } ${ this . lastName } ` ; } console . log ( `Full name is ${ fullName () } ` ); } } person . sayMyName (); Answer Line 8: 'Full name is undefined undefined' Problem is that implicit binding is on the sayMyName function Within sayMyName, this points to the person object On line 8, fullName() has no implicit, explicit or new binding Defaults to global binding Within the fullName function, this points to the window object In the global scope, we don't have any variables called firstName or lastName","title":"this without Arrow fonction"},{"location":"pages/advanced/javascript/this/#this-with-new-binding","text":"We can invoke a function with the 'new' keyword. In such a scenario, the function is invoked with this referencing an empty object. function Person ( name ) { // constructor function this . name = name ; } const pl = new Person ( 'Vishwas' ); const p2 = new Person ( 'Batman' ); When we invoke a function with the new keyword, JavaScript under the hood will create a new empty object that 'this' keyword will reference to. Add properties to that object using this followed by the dot notation. When a function is invoked with the new keyword, within that function this keyword will always reference a new empty object.","title":"this with new Binding"},{"location":"pages/advanced/javascript/this/#this-implicit-binding","text":"const person = { name : 'Vishwas' , sayMyName () { console . log ( `My name is ${ this . name } ` ); } }; person . sayMyName (); // -> 'My name is Vishwas' When a function is invoked with the dot notation, the object to the left of that dot is what the this keyword is referencing. this keyword is referencing the person object.","title":"this Implicit Binding"},{"location":"pages/advanced/javascript/this/#this-with-object-implicit-binding","text":"Fallback if none of the other three rules are matched. function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName () // My name is undefined var name = 'Vishwas' ; function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName (); // My name is Vishwas Important If none of the three rules are satisfied, JavaScript will default to the global scope and set this keyword to the window object.","title":"this with Object : implicit Binding"},{"location":"pages/advanced/javascript/this/#this-with-bind","text":"Explicit Binding const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } // -> 'My name is ' Bind works similar to the call method but instead of invoking the function, it returns a new function that you can invoke whenever you wish to. Bind method const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } const sayMyNameVishwas = sayMyName . bind ( person , 'Chess' , 'Football' ); sayMyNameVishwas (); // -> My name is Vishwas. I'm interested in Chess and Football","title":"this with bind"},{"location":"pages/advanced/javascript/this/#this-with-call","text":"Every function has a built in method named call which allows you to specify the context with which a function is invoked. call method const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName . call ( person ); // -> 'My name is Vishwas' The first argument passed to call is what this keyword inside sayMyName is referencing. If you want to specify arguments to your function, you can pass them in after the first argument to call. const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } sayMyName . call ( person , 'Chess' , 'Football' ); // -> My name is Vishwas. I'm interested in Chess and Football","title":"this with call"},{"location":"pages/advanced/javascript/this/#this-with-apply","text":"Every function has a built in method named apply which allows you to specify the context with which a function is invoked. apply method const person = { name : 'Vishwas' } function sayMyName () { console . log ( `My name is ${ this . name } ` ); } sayMyName . apply ( person ); // -> 'My name is Vishwas' The first argument passed to apply is what this keyword inside sayMyName is referencing. apply expects an array as its second argument. const person = { name : 'Vishwas' } function sayMyName ( hobby1 , hobby2 ) { console . log ( `My name is ${ this . name } ` , `I'm interested in ${ hobby1 } and ${ hobby2 } ` ); } sayMyName . apply ( person , [ 'Chess' , 'Football' ]); // -> My name is Vishwas. I'm interested in Chess and Football","title":"this with apply"},{"location":"pages/advanced/javascript/this/#this-apply-vs-call","text":"call takes in a comma separated arguments. apply takes in array as arguments. c all : c omma a pply : a rray Important call and apply which invoke a function right away with the context you have specified.","title":"this apply vs call"},{"location":"pages/advanced/javascript/timeout/","text":"Intro The setTimeout() function executes a particular block of code once after a specified time has elapsed. setTimeout ( function , duration , param1 , param2 , ...); The first parameter is a function to run, or a reference to a function defined elsewhere. The second parameter is a number representing the duration in milliseconds to wait before executing the code. After the second parameter, you can pass in zero or more values that represent any parameters you want to pass to the function when it is run. function greet () { console . log ( 'Hello' ); } setTimeout ( greet , 2000 ); // -> Logs 'Hello\u2019 to the console after 2 seconds function greet ( name ) { console . log ( 'Hello ${name}' ); } setTimeout ( greet , 2000 , 'Vishwas' ); // -> Logs 'Hello Vishwas' to the console after 2 seconds Clear a timeout To clear a timeout, you can use the clearTimeout() method passing in the identifier returned by setTimeout as a parameter. function greet () { console . log ( 'Hello' ); } const timeoutId = setTimeout ( greet , 2000 , 'Vishwas' ); clearTimeout ( timeoutId ); // -> Nothing is logged to the console Amore practical scenario is clearing timeouts when the component is unmounting to free up the resources and also prevent code from incorrectly executing on an unmounted component.","title":"Timeout"},{"location":"pages/advanced/javascript/timeout/#intro","text":"The setTimeout() function executes a particular block of code once after a specified time has elapsed. setTimeout ( function , duration , param1 , param2 , ...); The first parameter is a function to run, or a reference to a function defined elsewhere. The second parameter is a number representing the duration in milliseconds to wait before executing the code. After the second parameter, you can pass in zero or more values that represent any parameters you want to pass to the function when it is run. function greet () { console . log ( 'Hello' ); } setTimeout ( greet , 2000 ); // -> Logs 'Hello\u2019 to the console after 2 seconds function greet ( name ) { console . log ( 'Hello ${name}' ); } setTimeout ( greet , 2000 , 'Vishwas' ); // -> Logs 'Hello Vishwas' to the console after 2 seconds","title":"Intro"},{"location":"pages/advanced/javascript/timeout/#clear-a-timeout","text":"To clear a timeout, you can use the clearTimeout() method passing in the identifier returned by setTimeout as a parameter. function greet () { console . log ( 'Hello' ); } const timeoutId = setTimeout ( greet , 2000 , 'Vishwas' ); clearTimeout ( timeoutId ); // -> Nothing is logged to the console Amore practical scenario is clearing timeouts when the component is unmounting to free up the resources and also prevent code from incorrectly executing on an unmounted component.","title":"Clear a timeout"},{"location":"pages/advanced/typescript/","tags":["js","javascript","es6","Typescript"],"text":"","title":"Typescript"},{"location":"pages/advanced/typescript/advanced/","text":"TypeScript Avanc\u00e9 Type et Interface Intersection type Fish = { fin : number ; element : \"water\" ; gills : true ; } type Shark = { weight : number ; length : number ; } type HammerheadShark = Fish & Shark & { test : \"abc\" }; const shark1 : HammerheadShark = { fin : 3 , element : \"water\" , gills : true , weight : 500 , length : 200 , test : \"abc\" } let obj : { prop1 : \"a\" } & { prop2 : \"b\" } Lier des interfaces interface Flower { pollen : true ; type : \"vegetal\" } interface Rose extends Flower { color : string ; thorn : boolean ; } const RedRose : Rose = { pollen : true , type : \"vegetal\" , color : \"Rose\" , thorn : true } Union discriminante type Japan = { lang : \"JA\" ; food : string []; } type Italy = { lang : \"IT\" ; food : string []; } type Country = Japan | Italy ; const automaticResponse = ( country : Country ) => { if ( country . lang === \"JA\" ) { console . log ( \"Hello Japan\" ); } else if ( country . lang === \"IT\" ) { console . log ( \"Hello Italy\" ); } } const Japanese1 : Country = { lang : \"JA\" , food : [ \"Ramen\" , \"Sushis\" ] } automaticResponse ( Japanese1 ) Unknown number of props interface Group { [ name : string ] : object ; } const spainTrip : Group = { john : { id : 1 }, tom : { id : 2 }, julia : { id : 3 }, } 2- Op\u00e9rateurs L'op\u00e9rateur : ! const container = document . querySelector ( \".container\" ) ! ; // console.log(container.children); L'op\u00e9rateur : ? type Job = { title : string ; description? : string ; salary : number ; } const user1 : Job = { title : \"Dev Front-End\" , description : \"D\u00e9veloppeur de sites internet.\" , salary : 30000 } // console.log(user1?.description); Optional Parameter function message ( msg? : string ){ if ( msg ) { console . log ( msg ); } else { console . log ( \"No message provided\" ); } } // message(\"Hello World\") Optional interface property interface House { room : number ; price : number ; garage? : number ; } const house1 : House = { room : 4 , price : 300000 } ?? op\u00e9rateur const data = \"\" ; const display = data ?? \"Hello World\" console . log ( display ); // Never function alertUser ( msg : string ) : never { throw msg ; } alertUser ( \"Alerte, comportement dangereux\" ) 3- Overload type NumberOrString = number | string ; function combine ( a : number , b : number ) : number function combine ( a : number , b : string ) : string function combine ( a : string , b : number ) : string function combine ( a : string , b : string ) : string function combine ( a : NumberOrString , b : NumberOrString ){ if ( typeof a === \"string\" || typeof b === \"string\" ) { return a . toString () + b . toString () } else { return a + b ; } } console . log ( combine ( 50 , 1 )); 4- Les Generics Interface Reutilisable interface City < T > { name : string , pop : number , additionalData : T } const Londres : City < object > = { name : \"Londres\" , pop : 10 , additionalData : { area : 1572 } } const Paris : City < object [] > = { name : \"Paris\" , pop : 5 , additionalData : [{ underground : true , lines : 57 }, { restaurant : true Generics with functions const addRepairDate = < T extends object > ( obj : T ) => { const lastRepair = new Date () return {... obj , lastRepair } } const auto1 = addRepairDate ({ model : \"A1\" , km : 70000 , price : 10000 }) const auto2 = addRepairDate ({ model : \"A1\" , km : 70000 , price : 10000 , color : \"white\" }) console . log ( auto1 . model );","title":"TypeScript Avanc\u00e9"},{"location":"pages/advanced/typescript/advanced/#typescript-avance","text":"","title":"TypeScript Avanc\u00e9"},{"location":"pages/advanced/typescript/advanced/#type-et-interface","text":"Intersection type Fish = { fin : number ; element : \"water\" ; gills : true ; } type Shark = { weight : number ; length : number ; } type HammerheadShark = Fish & Shark & { test : \"abc\" }; const shark1 : HammerheadShark = { fin : 3 , element : \"water\" , gills : true , weight : 500 , length : 200 , test : \"abc\" } let obj : { prop1 : \"a\" } & { prop2 : \"b\" } Lier des interfaces interface Flower { pollen : true ; type : \"vegetal\" } interface Rose extends Flower { color : string ; thorn : boolean ; } const RedRose : Rose = { pollen : true , type : \"vegetal\" , color : \"Rose\" , thorn : true } Union discriminante type Japan = { lang : \"JA\" ; food : string []; } type Italy = { lang : \"IT\" ; food : string []; } type Country = Japan | Italy ; const automaticResponse = ( country : Country ) => { if ( country . lang === \"JA\" ) { console . log ( \"Hello Japan\" ); } else if ( country . lang === \"IT\" ) { console . log ( \"Hello Italy\" ); } } const Japanese1 : Country = { lang : \"JA\" , food : [ \"Ramen\" , \"Sushis\" ] } automaticResponse ( Japanese1 ) Unknown number of props interface Group { [ name : string ] : object ; } const spainTrip : Group = { john : { id : 1 }, tom : { id : 2 }, julia : { id : 3 }, }","title":"Type et Interface"},{"location":"pages/advanced/typescript/advanced/#2-operateurs","text":"L'op\u00e9rateur : ! const container = document . querySelector ( \".container\" ) ! ; // console.log(container.children); L'op\u00e9rateur : ? type Job = { title : string ; description? : string ; salary : number ; } const user1 : Job = { title : \"Dev Front-End\" , description : \"D\u00e9veloppeur de sites internet.\" , salary : 30000 } // console.log(user1?.description); Optional Parameter function message ( msg? : string ){ if ( msg ) { console . log ( msg ); } else { console . log ( \"No message provided\" ); } } // message(\"Hello World\") Optional interface property interface House { room : number ; price : number ; garage? : number ; } const house1 : House = { room : 4 , price : 300000 } ?? op\u00e9rateur const data = \"\" ; const display = data ?? \"Hello World\" console . log ( display ); // Never function alertUser ( msg : string ) : never { throw msg ; } alertUser ( \"Alerte, comportement dangereux\" )","title":"2- Op\u00e9rateurs"},{"location":"pages/advanced/typescript/advanced/#3-overload","text":"type NumberOrString = number | string ; function combine ( a : number , b : number ) : number function combine ( a : number , b : string ) : string function combine ( a : string , b : number ) : string function combine ( a : string , b : string ) : string function combine ( a : NumberOrString , b : NumberOrString ){ if ( typeof a === \"string\" || typeof b === \"string\" ) { return a . toString () + b . toString () } else { return a + b ; } } console . log ( combine ( 50 , 1 ));","title":"3- Overload"},{"location":"pages/advanced/typescript/advanced/#4-les-generics","text":"Interface Reutilisable interface City < T > { name : string , pop : number , additionalData : T } const Londres : City < object > = { name : \"Londres\" , pop : 10 , additionalData : { area : 1572 } } const Paris : City < object [] > = { name : \"Paris\" , pop : 5 , additionalData : [{ underground : true , lines : 57 }, { restaurant : true Generics with functions const addRepairDate = < T extends object > ( obj : T ) => { const lastRepair = new Date () return {... obj , lastRepair } } const auto1 = addRepairDate ({ model : \"A1\" , km : 70000 , price : 10000 }) const auto2 = addRepairDate ({ model : \"A1\" , km : 70000 , price : 10000 , color : \"white\" }) console . log ( auto1 . model );","title":"4- Les Generics"},{"location":"pages/advanced/typescript/basis/","text":"Les bases de TS 1-Les types de base let str = \"str\" let num = 5 let array = [] let obj = { a : 5 } let toggle = true let anything ; let randomNumber : number ; const conversion = ( celsius : number ) => { return ( celsius * 9 / 5 ) + 32 ; } console . log ( conversion ( 50 )); version ( 50 )); 2- Les Tableaux et les Objets Les tableaux const fruits = [ 'fraise' , 'pomme' ] fruits . push ( \"cerises\" ) console . log ( fruits ); const mixedArray = [ 1 , 'txt' , [ 1 , 2 , 3 ]] let nums : number []; nums . push ( 1 ) // erreur nums = [ 1 , 2 , 3 ] let nums2 : number [] = [] nums2 . push ( 2 ) let random : any []; random = [ true , false , true ] Les Objets const car = { name : \"Audi\" , model : \"A1\" , km : 70000 } car . name = 4 // erreur let profile : { name : string , age : number , hobbies : string [] } profile = { name : \"John\" , age : 85 , hobbies : [] } let user : { name : string , age : number , favFood : string [], data : any } = { name : \"Joe\" , age : 45 , favFood : [ 'pasta' , 'cheese' ], data : 50 } let obj : object ; obj = { name : \"Enzo\" } 3- Les Fonctions function multiply ( num1 : number , num2 = 10 , action? : string ) { if ( action ) console . log ( action ); return num1 * num2 ; } console . log ( multiply ( 6 , 10 , \"create\" )); let foo : Function ; foo = () => {} Function signatures let baz : ( a : number , b : number ) => number ; baz = ( a , b ) => a + b ; // Callback function greetings ( fn : ( a : string ) => void ) { fn ( \"Hello World\" ) } function printToConsole ( msg : string ) { console . log ( msg ); } greetings ( printToConsole ) 4- Les Unions et les custom types Les Unions let code : string | number | boolean | object | Function ; code = 5 let arr : ( boolean | number )[] arr = [ true , false , 999 ] const foo = ( param : number | string ) => { console . log ( param ); } foo ( 'Test' ) Les Types Perso type mixedNumStr = number | string ; type booleanOrObject = boolean | object ; const baz = ( param : mixedNumStr | booleanOrObject ) => { console . log ( param ); } baz ( true ) type element = { x : number ; y : number ; id : number | string ; visible : boolean ; } const button : element = { x : 99 , y : 50 , id : 999 , visible : true } 5- Tuple et Enum Tuple let tuple : [ boolean , number ] tuple = [ false , 20 ] Enum const Roles = { JAVASCRIPT : 1 , CSS : 2 , REACT : 3 } console . log ( Roles . JAVASCRIPT ); enum Roles { JAVASCRIPT = 1 , CSS , REACT } console . log ( Roles ); 6- Interfaces interface Rocket { reactors : number ; vMax : number ; takeOff : ( action : string ) => void } interface Rocket { price : number ; carburant : number ; } class RocketFactory implements Rocket { reactors : number ; vMax : number ; price : number ; carburant : number ; constructor ( reactors : number , vMax : number , price : number , carburant : number ) { this . reactors = reactors ; this . vMax = vMax ; this . price = price ; this . carburant = carburant ; } takeOff ( action : string ){ console . log ( action ); } } const Falcon1 = new RocketFactory ( 12 , 900 , 2 , 9000 ) console . log ( Falcon1 ); Falcon1 . takeOff ( 'D\u00e9collage' ) 7- Le DOM Type Assertion let txt : string ; txt = \"str\" Assertion const form : HTMLFormElement = document . querySelector ( 'form' ) ! console . log ( form . children ); Type Casting const form = document . querySelector ( 'form' ) as HTMLFormElement console . log ( form . children ); const input = document . querySelector ( 'input' ) as HTMLInputElement form . addEventListener ( 'submit' , handleSubmit ) function handleSubmit ( event : Event ){ event . preventDefault () console . log ( \"SUBMITTED\" ); } window . addEventListener ( 'click' , handleClick ) function handleClick ( event : MouseEvent ) { console . log ( event . clientX , event . clientY ); } const paragraphsList = document . querySelectorAll ( 'p' );","title":"Les bases de TS"},{"location":"pages/advanced/typescript/basis/#les-bases-de-ts","text":"","title":"Les bases de TS"},{"location":"pages/advanced/typescript/basis/#1-les-types-de-base","text":"let str = \"str\" let num = 5 let array = [] let obj = { a : 5 } let toggle = true let anything ; let randomNumber : number ; const conversion = ( celsius : number ) => { return ( celsius * 9 / 5 ) + 32 ; } console . log ( conversion ( 50 )); version ( 50 ));","title":"1-Les types de base"},{"location":"pages/advanced/typescript/basis/#2-les-tableaux-et-les-objets","text":"Les tableaux const fruits = [ 'fraise' , 'pomme' ] fruits . push ( \"cerises\" ) console . log ( fruits ); const mixedArray = [ 1 , 'txt' , [ 1 , 2 , 3 ]] let nums : number []; nums . push ( 1 ) // erreur nums = [ 1 , 2 , 3 ] let nums2 : number [] = [] nums2 . push ( 2 ) let random : any []; random = [ true , false , true ] Les Objets const car = { name : \"Audi\" , model : \"A1\" , km : 70000 } car . name = 4 // erreur let profile : { name : string , age : number , hobbies : string [] } profile = { name : \"John\" , age : 85 , hobbies : [] } let user : { name : string , age : number , favFood : string [], data : any } = { name : \"Joe\" , age : 45 , favFood : [ 'pasta' , 'cheese' ], data : 50 } let obj : object ; obj = { name : \"Enzo\" }","title":"2- Les Tableaux  et les Objets"},{"location":"pages/advanced/typescript/basis/#3-les-fonctions","text":"function multiply ( num1 : number , num2 = 10 , action? : string ) { if ( action ) console . log ( action ); return num1 * num2 ; } console . log ( multiply ( 6 , 10 , \"create\" )); let foo : Function ; foo = () => {} Function signatures let baz : ( a : number , b : number ) => number ; baz = ( a , b ) => a + b ; // Callback function greetings ( fn : ( a : string ) => void ) { fn ( \"Hello World\" ) } function printToConsole ( msg : string ) { console . log ( msg ); } greetings ( printToConsole )","title":"3- Les Fonctions"},{"location":"pages/advanced/typescript/basis/#4-les-unions-et-les-custom-types","text":"Les Unions let code : string | number | boolean | object | Function ; code = 5 let arr : ( boolean | number )[] arr = [ true , false , 999 ] const foo = ( param : number | string ) => { console . log ( param ); } foo ( 'Test' ) Les Types Perso type mixedNumStr = number | string ; type booleanOrObject = boolean | object ; const baz = ( param : mixedNumStr | booleanOrObject ) => { console . log ( param ); } baz ( true ) type element = { x : number ; y : number ; id : number | string ; visible : boolean ; } const button : element = { x : 99 , y : 50 , id : 999 , visible : true }","title":"4- Les Unions et les custom types"},{"location":"pages/advanced/typescript/basis/#5-tuple-et-enum","text":"Tuple let tuple : [ boolean , number ] tuple = [ false , 20 ] Enum const Roles = { JAVASCRIPT : 1 , CSS : 2 , REACT : 3 } console . log ( Roles . JAVASCRIPT ); enum Roles { JAVASCRIPT = 1 , CSS , REACT } console . log ( Roles );","title":"5- Tuple et Enum"},{"location":"pages/advanced/typescript/basis/#6-interfaces","text":"interface Rocket { reactors : number ; vMax : number ; takeOff : ( action : string ) => void } interface Rocket { price : number ; carburant : number ; } class RocketFactory implements Rocket { reactors : number ; vMax : number ; price : number ; carburant : number ; constructor ( reactors : number , vMax : number , price : number , carburant : number ) { this . reactors = reactors ; this . vMax = vMax ; this . price = price ; this . carburant = carburant ; } takeOff ( action : string ){ console . log ( action ); } } const Falcon1 = new RocketFactory ( 12 , 900 , 2 , 9000 ) console . log ( Falcon1 ); Falcon1 . takeOff ( 'D\u00e9collage' )","title":"6- Interfaces"},{"location":"pages/advanced/typescript/basis/#7-le-dom","text":"Type Assertion let txt : string ; txt = \"str\" Assertion const form : HTMLFormElement = document . querySelector ( 'form' ) ! console . log ( form . children ); Type Casting const form = document . querySelector ( 'form' ) as HTMLFormElement console . log ( form . children ); const input = document . querySelector ( 'input' ) as HTMLInputElement form . addEventListener ( 'submit' , handleSubmit ) function handleSubmit ( event : Event ){ event . preventDefault () console . log ( \"SUBMITTED\" ); } window . addEventListener ( 'click' , handleClick ) function handleClick ( event : MouseEvent ) { console . log ( event . clientX , event . clientY ); } const paragraphsList = document . querySelectorAll ( 'p' );","title":"7- Le DOM"},{"location":"pages/advanced/typescript/classes/","text":"Les classes Les Classes de base class Book { title : string ; price : number ; dateOfParution : string ; author : string ; theme? : string [] constructor ( t : string , p : number , dop : string , a : string , th? : string []) { this . title = t ; this . price = p ; this . dateOfParution = dop ; this . author = a ; this . theme = th ; } promo (){ return this . price * 0.5 ; } } const book1 = new Book ( \"The Great Gatsby\" , 20 , \"11/04/1955\" , \"Tom Joe\" ); // console.log(book1); // console.log(book1.promo()); const addToShelter = ( obj : Book ) => { console . log ( \"ADDED TO SHELTER\" , obj ); } // addToShelter(new Book(\"Nana\", 5, \"12/07/1905\", \"Zola\", // [\"Roman Historique\", \"Roman\"])) let onlyBook : Book [] = []; onlyBook . push ( new Book ( \"Nana\" , 5 , \"12/07/1905\" , \"Zola\" , [ \"Roman Historique\" , \"Roman\" ])) console . log ( onlyBook ); Les champs class Book { private bookID = 88 readonly libraryName = \"The Book Shelf\" constructor ( public title : string , public price : number , public dateOfParution : string , public author : string , public theme? : string [] ) {} promo (){ console . log ( \"ID\" , this . bookID ); console . log ( \"NAME\" , this . libraryName ); // this.libraryName = 500 return this . price * 0.5 ; } } const book1 = new Book ( \"The Great Gatsby\" , 20 , \"11/04/1955\" , \"Tom Joe\" ); console . log ( book1 ); console . log ( book1 . promo ()); console . log ( book1 . libraryName ); const addToShelter = ( obj : Book ) => { console . log ( \"ADDED TO SHELTER\" , obj ); } // addToShelter(new Book(\"Nana\", 5, \"12/07/1905\", \"Zola\", // [\"Roman Historique\", \"Roman\"])) let onlyBook : Book [] = []; onlyBook . push ( new Book ( \"Nana\" , 5 , \"12/07/1905\" , \"Zola\" , [ \"Roman Historique\" , \"Roman\" ])) // console.log(onlyBook); // Syntaxe sans raccourci class Book { title : string ; price : number ; dateOfParution : string ; author : string ; theme? : string []; private bookID = 88 readonly libraryName = \"The Book Shelf\" constructor ( t : string , p : number , dop : string , a : string , th? : string []) { this . title = t ; this . price = p ; this . dateOfParution = dop ; this . author = a ; this . theme = th ; } promo (){ console . log ( \"ID\" , this . bookID ); console . log ( \"NAME\" , this . libraryName ); this . libraryName = 500 return this . price * 0.5 ; } } Les Interfaces et Classes interface Country { name : string ; population : number ; lang : string [] } class Norway implements Country { constructor ( public name : string , public population : number , public lang : string [], public Capital : string ) {} } const NorwayData = new Norway ( 'Norway' , 9 , [ \"Norwegian\" ], \"Oslo\" ) console . log ( NorwayData ); class France implements Country { constructor ( public name : string , public population : number , public lang : string [] ) {} } const FranceData = new France ( 'France' , 70 , [ \"Fran\u00e7ais\" , \"Breton\" , \"Basque\" ] ) console . log ( FranceData ); class Aquitaine extends France {} const AquitaineData = new Aquitaine ( \"Aquitaine\" , 4 , [ \"Fran\u00e7ais\" , \"Basque\" , \"Gascon\" ] )","title":"Les classes"},{"location":"pages/advanced/typescript/classes/#les-classes","text":"","title":"Les classes"},{"location":"pages/advanced/typescript/classes/#les-classes-de-base","text":"class Book { title : string ; price : number ; dateOfParution : string ; author : string ; theme? : string [] constructor ( t : string , p : number , dop : string , a : string , th? : string []) { this . title = t ; this . price = p ; this . dateOfParution = dop ; this . author = a ; this . theme = th ; } promo (){ return this . price * 0.5 ; } } const book1 = new Book ( \"The Great Gatsby\" , 20 , \"11/04/1955\" , \"Tom Joe\" ); // console.log(book1); // console.log(book1.promo()); const addToShelter = ( obj : Book ) => { console . log ( \"ADDED TO SHELTER\" , obj ); } // addToShelter(new Book(\"Nana\", 5, \"12/07/1905\", \"Zola\", // [\"Roman Historique\", \"Roman\"])) let onlyBook : Book [] = []; onlyBook . push ( new Book ( \"Nana\" , 5 , \"12/07/1905\" , \"Zola\" , [ \"Roman Historique\" , \"Roman\" ])) console . log ( onlyBook );","title":"Les Classes de base"},{"location":"pages/advanced/typescript/classes/#les-champs","text":"class Book { private bookID = 88 readonly libraryName = \"The Book Shelf\" constructor ( public title : string , public price : number , public dateOfParution : string , public author : string , public theme? : string [] ) {} promo (){ console . log ( \"ID\" , this . bookID ); console . log ( \"NAME\" , this . libraryName ); // this.libraryName = 500 return this . price * 0.5 ; } } const book1 = new Book ( \"The Great Gatsby\" , 20 , \"11/04/1955\" , \"Tom Joe\" ); console . log ( book1 ); console . log ( book1 . promo ()); console . log ( book1 . libraryName ); const addToShelter = ( obj : Book ) => { console . log ( \"ADDED TO SHELTER\" , obj ); } // addToShelter(new Book(\"Nana\", 5, \"12/07/1905\", \"Zola\", // [\"Roman Historique\", \"Roman\"])) let onlyBook : Book [] = []; onlyBook . push ( new Book ( \"Nana\" , 5 , \"12/07/1905\" , \"Zola\" , [ \"Roman Historique\" , \"Roman\" ])) // console.log(onlyBook); // Syntaxe sans raccourci class Book { title : string ; price : number ; dateOfParution : string ; author : string ; theme? : string []; private bookID = 88 readonly libraryName = \"The Book Shelf\" constructor ( t : string , p : number , dop : string , a : string , th? : string []) { this . title = t ; this . price = p ; this . dateOfParution = dop ; this . author = a ; this . theme = th ; } promo (){ console . log ( \"ID\" , this . bookID ); console . log ( \"NAME\" , this . libraryName ); this . libraryName = 500 return this . price * 0.5 ; } }","title":"Les champs"},{"location":"pages/advanced/typescript/classes/#les-interfaces-et-classes","text":"interface Country { name : string ; population : number ; lang : string [] } class Norway implements Country { constructor ( public name : string , public population : number , public lang : string [], public Capital : string ) {} } const NorwayData = new Norway ( 'Norway' , 9 , [ \"Norwegian\" ], \"Oslo\" ) console . log ( NorwayData ); class France implements Country { constructor ( public name : string , public population : number , public lang : string [] ) {} } const FranceData = new France ( 'France' , 70 , [ \"Fran\u00e7ais\" , \"Breton\" , \"Basque\" ] ) console . log ( FranceData ); class Aquitaine extends France {} const AquitaineData = new Aquitaine ( \"Aquitaine\" , 4 , [ \"Fran\u00e7ais\" , \"Basque\" , \"Gascon\" ] )","title":"Les Interfaces et Classes"},{"location":"pages/advanced/typescript/react/","text":"Typescript with react app.tsx import React , { useState , useRef , useEffect } from 'react' ; import Card from './components/Card' function App () { const [ cardsData , setCardsData ] = useState ([ { title : \"Picasso\" , content : \"Peintre XX\u00e8me si\u00e8cle\" , id : 1 }, { title : \"Van Gogh\" , content : \"Peintre XIX\u00e8me si\u00e8cle\" , id : 2 }, ]) const btnRef = useRef < HTMLButtonElement > ( null ) useEffect (() => { console . log ( btnRef ); const handleResize = ( e : Event ) => { console . log ( \"RESIZED\" , e ); } window . addEventListener ( \"resize\" , handleResize ); return () => { window . removeEventListener ( 'resize' , handleResize ) } }, []) return ( < div className = \"App\" > { cardsData . map (( item ) => ( < Card key = { item . id } title = { item . title } content = { item . content } /> ))} { /* <Card title=\"La Carte\" content=\"Le Contenu\" /> */ } < button ref = { btnRef } > Submit < /button> < /div> ); } export default App ; component/Card.tsx import React from 'react' type CardProps = { title : string ; content : string ; } // export default function Card(props: CardProps) { export default function Card ({ title , content } : CardProps ) { // console.log(props); return ( < div > < h1 > { title } < /h1> < p > { content } < /p> < /div> ) }","title":"Typescript with react"},{"location":"pages/advanced/typescript/react/#typescript-with-react","text":"","title":"Typescript with react"},{"location":"pages/advanced/typescript/react/#apptsx","text":"import React , { useState , useRef , useEffect } from 'react' ; import Card from './components/Card' function App () { const [ cardsData , setCardsData ] = useState ([ { title : \"Picasso\" , content : \"Peintre XX\u00e8me si\u00e8cle\" , id : 1 }, { title : \"Van Gogh\" , content : \"Peintre XIX\u00e8me si\u00e8cle\" , id : 2 }, ]) const btnRef = useRef < HTMLButtonElement > ( null ) useEffect (() => { console . log ( btnRef ); const handleResize = ( e : Event ) => { console . log ( \"RESIZED\" , e ); } window . addEventListener ( \"resize\" , handleResize ); return () => { window . removeEventListener ( 'resize' , handleResize ) } }, []) return ( < div className = \"App\" > { cardsData . map (( item ) => ( < Card key = { item . id } title = { item . title } content = { item . content } /> ))} { /* <Card title=\"La Carte\" content=\"Le Contenu\" /> */ } < button ref = { btnRef } > Submit < /button> < /div> ); } export default App ;","title":"app.tsx"},{"location":"pages/advanced/typescript/react/#componentcardtsx","text":"import React from 'react' type CardProps = { title : string ; content : string ; } // export default function Card(props: CardProps) { export default function Card ({ title , content } : CardProps ) { // console.log(props); return ( < div > < h1 > { title } < /h1> < p > { content } < /p> < /div> ) }","title":"component/Card.tsx"},{"location":"pages/basis/","tags":["web","advanced"],"text":"","title":"Basis"},{"location":"pages/basis/css/","text":"CSS bases CSS Selector \ud83d\udcd1 Le lien vers la doc S\u00e9lecteurs CSS - Apprendre le d\u00e9veloppement web | MDN FlexBox \ud83d\udcd1 Le lien vers la doc A Complete Guide to Flexbox | CSS-Tricks - CSS-Tricks Grid \ud83d\udcd1 Le lien vers la doc A Complete Guide to Grid | CSS-Tricks - CSS-Tricks CSS Fondamentals CSS Calc function div { width : calc ( 100 % + 50 px ); } div { width : calc ( 100 % * 2 ); } CSS Units px (absolute) Pretty self explanatory absolute lenght in pixel Avoid using pixel for font-sizes. Use mostly for small details like border and shadow. Fixed in size Not responsive Overrides user's browser preference % (relative) Relative to the value of parent element. 100% is the width of the parent element I recommend using percentages for layouts and width/height. For example, laying out links on navbar, placing images inside a div ... Size is defined as percentage of another value (mostly parent element) Sometimes size is defined as percentage of the element itself em (relative) Relative to the font-size of the parent element. You can use em for font-size and margin/padding. Use em when you want to adjust margin/padding based on that element's font-size (if you font-sized is big, you maybe want bigger spacing) Changes behavior based on property 1 em = parent font-size if parent doesn't have a size, defaults to 16 px (body) rem (relative) Relative to the font-size of the root element You can also use rem for font-size and margin/padding. rem is easier to work than em because its more consistent. Relative to the root HTML, no matter what (default is 16px) You can change the root HTML size. For exemple if you change it to 20px, 1 rem will always 20 px. vw / vh (relative) Equal to 1% of the height of the browser window size **vh/vh are relative to the width/height of the browser window. 100vw means full width of the screen. Use vw/vh for bigger layouts, like background. Useful for responsive website because everything scales. dvh / lvh / svh (relative) For mobile screen height CSS Variables for unit variable (size, width...) : root { --unit : 16 px ; } header { padding : var ( --unit ); } h1 { margin-bottom : var ( --unit ); } for color variable : root { --primary-color : #333 ; } div { background-color : var ( --primary-color ); } . test { color : var ( --primarycolor ); }","title":"CSS"},{"location":"pages/basis/css/#css-bases","text":"","title":"CSS bases"},{"location":"pages/basis/css/#css-selector","text":"\ud83d\udcd1 Le lien vers la doc S\u00e9lecteurs CSS - Apprendre le d\u00e9veloppement web | MDN","title":"CSS Selector"},{"location":"pages/basis/css/#flexbox","text":"\ud83d\udcd1 Le lien vers la doc A Complete Guide to Flexbox | CSS-Tricks - CSS-Tricks","title":"FlexBox"},{"location":"pages/basis/css/#grid","text":"\ud83d\udcd1 Le lien vers la doc A Complete Guide to Grid | CSS-Tricks - CSS-Tricks","title":"Grid"},{"location":"pages/basis/css/#css-fondamentals","text":"","title":"CSS Fondamentals"},{"location":"pages/basis/css/#css-calc-function","text":"div { width : calc ( 100 % + 50 px ); } div { width : calc ( 100 % * 2 ); }","title":"CSS Calc function"},{"location":"pages/basis/css/#css-units","text":"","title":"CSS Units"},{"location":"pages/basis/css/#px-absolute","text":"Pretty self explanatory absolute lenght in pixel Avoid using pixel for font-sizes. Use mostly for small details like border and shadow. Fixed in size Not responsive Overrides user's browser preference","title":"px (absolute)"},{"location":"pages/basis/css/#relative","text":"Relative to the value of parent element. 100% is the width of the parent element I recommend using percentages for layouts and width/height. For example, laying out links on navbar, placing images inside a div ... Size is defined as percentage of another value (mostly parent element) Sometimes size is defined as percentage of the element itself","title":"% (relative)"},{"location":"pages/basis/css/#em-relative","text":"Relative to the font-size of the parent element. You can use em for font-size and margin/padding. Use em when you want to adjust margin/padding based on that element's font-size (if you font-sized is big, you maybe want bigger spacing) Changes behavior based on property 1 em = parent font-size if parent doesn't have a size, defaults to 16 px (body)","title":"em (relative)"},{"location":"pages/basis/css/#rem-relative","text":"Relative to the font-size of the root element You can also use rem for font-size and margin/padding. rem is easier to work than em because its more consistent. Relative to the root HTML, no matter what (default is 16px) You can change the root HTML size. For exemple if you change it to 20px, 1 rem will always 20 px.","title":"rem (relative)"},{"location":"pages/basis/css/#vw-vh-relative","text":"Equal to 1% of the height of the browser window size **vh/vh are relative to the width/height of the browser window. 100vw means full width of the screen. Use vw/vh for bigger layouts, like background. Useful for responsive website because everything scales.","title":"vw / vh (relative)"},{"location":"pages/basis/css/#dvh-lvh-svh-relative","text":"For mobile screen height","title":"dvh / lvh / svh (relative)"},{"location":"pages/basis/css/#css-variables","text":"for unit variable (size, width...) : root { --unit : 16 px ; } header { padding : var ( --unit ); } h1 { margin-bottom : var ( --unit ); } for color variable : root { --primary-color : #333 ; } div { background-color : var ( --primary-color ); } . test { color : var ( --primarycolor ); }","title":"CSS Variables"},{"location":"pages/basis/es6/","text":"# ES Module //fichier /helper/math/simple-math.js export function somme ( a , b ) { return a + b } export let auteur = 'Euler' export const PI = 3.14 // the default export export default function multiplication ( a , b ) { return a * b } // import the default import math from 'helper/math/simple-math' // or any name you need import myMath from 'helper/math/simple-math' // or import default and the others modules in one line: import math , { auteur , PI , somme } from 'helper/math/simple-math' // you can change module name normal export (author) import math , { auteur as author , PI , somme } from 'helper/math/simple-math' math ( 6 , 6 ) // retourne 36 somme ( 6 , 6 ) // retourne 12 console . log ( author ) // return Euler console . log ( PI ) // return 3.14 Template literal let a = 5 let b = 10 const name = 'toto' console.log(`Mon nom ${name} & Quinze vaut ${a + b} etnon ${2 * a + b}.`) // \"Quinze vaut 15 et // non 20.\" Destructuring With Object const personne = { nom : 'john' , prenom : 'doe' , age : 25 , ville : 'paris' } function sayHello ( personne ) { const nom = personne . nom const prenom = personne . prenom const age = personne . age const ville = personne . ville console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } // \u2193 identique \u00e0 \u2193 //m\u00eame fonction mais avec la destructuration function sayHello ( personne ) { const { nom , prenom , age , ville } = personne console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } //on peut aussi faire la destructuration en parametre function sayHello ({ nom , prenom , age , ville }) { console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } With Array const toto = [ 'un' , 'deux' , 'trois' ] // sans utiliser la d\u00e9composition const un = toto [ 0 ] const deux = toto [ 1 ] const trois = toto [ 2 ] // en utilisant la d\u00e9composition const [ un , deux , trois ] = toto With function const personne = { nom : 'john' , prenom : 'doe' , age : 25 , ville : 'paris' } const showPersonne = ({ nom , prenom , age , ville }) => { console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } showPersonne ( personne ) Shortlang const prenom = 'codeur' const age = 'bali' const ville = 'paris' // instead to do this: const personne = { prenom : prenom , age : age , ville : ville } // do: const personne = { prenom , age , ville } Arrow function Fonctions fl\u00e9ch\u00e9es - JavaScript | MDN ] //fonctions classiques function sayHello () { return 'hello' } function sayHelloName ( name ) { return 'hello ' + name } function somme ( a , b ) { return a + b } //fonctions fl\u00e9ch\u00e9es const sayHello = () => 'hello' const sayHelloName = name => 'hello ' + name const somme = ( a , b ) => a + b const somme = ( a , b ) => { let c = a + b return c } Nullish coalishing It allow to avoid js error with null or undefined data. Nullish coalescing operator Docs function sayHello(name) { let nameSafe = name ?? 'anonyme' return `Bonjour ${nameSafe}` } sayHello() // Bonjour anonyme sayHello(null) // Bonjour anonyme sayHello('Mike') // Bonjour mike Optional chaining Optional chaining Docs For using data in object we need to test them if it's not undefined : const countryCode = personne . adress . country . code //\u274c non null safe //Uncaught TypeError: Cannot read property 'country' of undefined // manage the null safe if ( personne && personne . adress && personne . adress . country ) { const countryCode = personne . adress . country . code } // or const countryCode = personne && personne . adress && personne . adress . country . code With ES6 we can use the optional chaining : const countryCode = personne ? . adress ? . country ? . code // return the data or null without error Ternal operator L'op\u00e9rateur conditionnel Doc //m\u00e9thode classique function welcome ( isAdmin ) { if ( isAdmin ) { return 'Hello Admin' } else { return 'Hello Member' } } //\u00e9quivalent en ternaire function welcome ( isAdmin ) { return isAdmin ? 'Hello Admin' : 'Hello Member' } Array methods in ES6 Array.prototype.every() - Docs const computers = [ { id : 'pc-1' , name : 'MacBook Pro' , features : [ 'usb-c' , 'screen-15' , 'batterie' , 'keyboard' , 'webcam' , 'ssd-1to' , ], }, { id : 'pc-2' , name : 'Lenovo' , features : [ 'usb-a' , 'screen-15' , 'batterie' , 'keyboard' , 'ssd-500go' ], }, { id : 'pc-3' , name : 'MSI' , features : [ 'usb-a' , 'screen-13' , 'batterie' , 'keyboard' , 'webcam' , 'ssd-500go' , ], }, ] Use with : map => array computers . map ( computer => 'Brand/' + computer . name ) // ['Brand/MacBook Pro', 'Brand/Lenovo', 'Brand/MSI'] `forEach`` => executes your code once for each array element computers . forEach ( computer => { console . log ( computer . name ) } ) // 'MacBook Pro' // 'Lenovo' // 'MSI' let computerListName = []; computers . forEach ( function ( item ){ computerListName . push ( item ); }); // computerListName = [ 'MacBook Pro', 'Lenovo', 'MSI' ] filter (with includes ) => array // output only computers with 'screen-15' feature computers . filter ( computer => computer . features . includes ( 'screen-15' )) // [{id: 'pc-1', ..etc}, {id: 'pc-2', ...}] some => boolean // test if there is any computer with ''ssd-2to' feature computers . some ( computer => computer . features . includes ( 'ssd-2to' )) // output false every => boolean // Test if every computer has feature like 'ssd-1to' or 'keyboard' computers . every ( computer => computer . features . includes ( 'ssd-1to' )) // output false computers . every ( computer => computer . features . includes ( 'keyboard' )) // output true find => first element that satisfies the provided testing function // Find every computer which are ''MacBook Pro' (it found one) computers . find ( computer => computer . name === 'MacBook Pro' ) // {id: 'pc-1', name: 'MacBook Pro', ...} reduce => value from the calculation on the preceding element The scheme is : array.reduce((accumulator, element) // Output every computer's features in any array with a spray operators computers . reduce (( allFeatures , computer ) => { return [... allFeatures , ... computer . features ] }, []) // output : // [ 'usb-c', 'screen-15', 'batterie', 'keyboard', 'webcam', 'ssd-1to', // 'usb-a', 'screen-15', 'batterie', 'keyboard', 'ssd-500go', 'usb-a', // 'screen-13', 'batterie', 'keyboard', 'webcam', 'ssd-500go' ] Exemple with filter and map Find every computer with webcam and output their names. const webCamPcName = computers . filter ( computer => computer . features . includes ( 'webcam' ) ) . map ( computer => computer . name ); console . log ( webCamPcName ); // [show MacBook Pro, MSI] Rest parameters Math.min(100, 10, 1) // retoune 1 const arr = [5, 6, 8, 4, 9] Math.min(arr[0], arr[1], arr[2], arr[3], arr[4]) // Same thing with with Rest Math.min(...arr) Spread operator // spread with object const personne = { nom : 'mike' , prenom : 'codeur' , adresse : 'bali' } const personne2 = {... personne , rue : 17 } // spread with array let numberStore = [ 0 , 1 , 2 ]; let newNumber = 12 ; numberStore = [... numberStore , newNumber ]; Promise Async Await Promise - JavaScript | MDN Voir le cours plus \u00e9volu\u00e9 dans advanced async-await et callback Create the promise : //cr\u00e9ation d'un promise function simulationFetch ( duration = 0 ) { return new Promise (( resolve , reject ) => { setTimeout (() => { if ( duration > 400 ) { reject ( `KO Timeout` ) } else { resolve ( `OK` ) } }, duration ) }) } Use the promise simulationFetch ( 100 ). then ( callBackOK , callBakcError ) simulationFetch ( 100 ). then ( e => console . log ( e ), err => console . error ( err ), ) // OK simulationFetch ( 500 ). then ( e => console . log ( e ), err => console . error ( err ), ) // KO Use the promise with async/await async function simulationFetchAsyncSuccess () { const result = await simulationFetch ( 200 ) return `success: ${ result } ` } async function simulationFetchAsyncFailed () { const result = await simulationFetch ( 500 ) return `failed: ${ result } ` // ne devrait pas etre execut\u00e9 } async function simulationFetchAsyncCatch () { let result try { result = await simulationFetch ( 500 , true ) return `failed: ${ result } ` // this would not be executed } catch ( error ) { return `failed and recovered: ${ error } ` } }","title":"ES Module"},{"location":"pages/basis/es6/#es-module","text":"//fichier /helper/math/simple-math.js export function somme ( a , b ) { return a + b } export let auteur = 'Euler' export const PI = 3.14 // the default export export default function multiplication ( a , b ) { return a * b } // import the default import math from 'helper/math/simple-math' // or any name you need import myMath from 'helper/math/simple-math' // or import default and the others modules in one line: import math , { auteur , PI , somme } from 'helper/math/simple-math' // you can change module name normal export (author) import math , { auteur as author , PI , somme } from 'helper/math/simple-math' math ( 6 , 6 ) // retourne 36 somme ( 6 , 6 ) // retourne 12 console . log ( author ) // return Euler console . log ( PI ) // return 3.14","title":"# ES Module"},{"location":"pages/basis/es6/#template-literal","text":"let a = 5 let b = 10 const name = 'toto' console.log(`Mon nom ${name} & Quinze vaut ${a + b} etnon ${2 * a + b}.`) // \"Quinze vaut 15 et // non 20.\"","title":"Template literal"},{"location":"pages/basis/es6/#destructuring","text":"With Object const personne = { nom : 'john' , prenom : 'doe' , age : 25 , ville : 'paris' } function sayHello ( personne ) { const nom = personne . nom const prenom = personne . prenom const age = personne . age const ville = personne . ville console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } // \u2193 identique \u00e0 \u2193 //m\u00eame fonction mais avec la destructuration function sayHello ( personne ) { const { nom , prenom , age , ville } = personne console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } //on peut aussi faire la destructuration en parametre function sayHello ({ nom , prenom , age , ville }) { console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } With Array const toto = [ 'un' , 'deux' , 'trois' ] // sans utiliser la d\u00e9composition const un = toto [ 0 ] const deux = toto [ 1 ] const trois = toto [ 2 ] // en utilisant la d\u00e9composition const [ un , deux , trois ] = toto With function const personne = { nom : 'john' , prenom : 'doe' , age : 25 , ville : 'paris' } const showPersonne = ({ nom , prenom , age , ville }) => { console . log ( `Bonjour ${ nom } ${ prenom } tu as ${ age } \u00e0 ${ ville } ` ) } showPersonne ( personne )","title":"Destructuring"},{"location":"pages/basis/es6/#shortlang","text":"const prenom = 'codeur' const age = 'bali' const ville = 'paris' // instead to do this: const personne = { prenom : prenom , age : age , ville : ville } // do: const personne = { prenom , age , ville }","title":"Shortlang"},{"location":"pages/basis/es6/#arrow-function","text":"Fonctions fl\u00e9ch\u00e9es - JavaScript | MDN ] //fonctions classiques function sayHello () { return 'hello' } function sayHelloName ( name ) { return 'hello ' + name } function somme ( a , b ) { return a + b } //fonctions fl\u00e9ch\u00e9es const sayHello = () => 'hello' const sayHelloName = name => 'hello ' + name const somme = ( a , b ) => a + b const somme = ( a , b ) => { let c = a + b return c }","title":"Arrow function"},{"location":"pages/basis/es6/#nullish-coalishing","text":"It allow to avoid js error with null or undefined data. Nullish coalescing operator Docs function sayHello(name) { let nameSafe = name ?? 'anonyme' return `Bonjour ${nameSafe}` } sayHello() // Bonjour anonyme sayHello(null) // Bonjour anonyme sayHello('Mike') // Bonjour mike","title":"Nullish coalishing"},{"location":"pages/basis/es6/#optional-chaining","text":"Optional chaining Docs For using data in object we need to test them if it's not undefined : const countryCode = personne . adress . country . code //\u274c non null safe //Uncaught TypeError: Cannot read property 'country' of undefined // manage the null safe if ( personne && personne . adress && personne . adress . country ) { const countryCode = personne . adress . country . code } // or const countryCode = personne && personne . adress && personne . adress . country . code With ES6 we can use the optional chaining : const countryCode = personne ? . adress ? . country ? . code // return the data or null without error","title":"Optional chaining"},{"location":"pages/basis/es6/#ternal-operator","text":"L'op\u00e9rateur conditionnel Doc //m\u00e9thode classique function welcome ( isAdmin ) { if ( isAdmin ) { return 'Hello Admin' } else { return 'Hello Member' } } //\u00e9quivalent en ternaire function welcome ( isAdmin ) { return isAdmin ? 'Hello Admin' : 'Hello Member' }","title":"Ternal operator"},{"location":"pages/basis/es6/#array-methods-in-es6","text":"Array.prototype.every() - Docs const computers = [ { id : 'pc-1' , name : 'MacBook Pro' , features : [ 'usb-c' , 'screen-15' , 'batterie' , 'keyboard' , 'webcam' , 'ssd-1to' , ], }, { id : 'pc-2' , name : 'Lenovo' , features : [ 'usb-a' , 'screen-15' , 'batterie' , 'keyboard' , 'ssd-500go' ], }, { id : 'pc-3' , name : 'MSI' , features : [ 'usb-a' , 'screen-13' , 'batterie' , 'keyboard' , 'webcam' , 'ssd-500go' , ], }, ] Use with : map => array computers . map ( computer => 'Brand/' + computer . name ) // ['Brand/MacBook Pro', 'Brand/Lenovo', 'Brand/MSI'] `forEach`` => executes your code once for each array element computers . forEach ( computer => { console . log ( computer . name ) } ) // 'MacBook Pro' // 'Lenovo' // 'MSI' let computerListName = []; computers . forEach ( function ( item ){ computerListName . push ( item ); }); // computerListName = [ 'MacBook Pro', 'Lenovo', 'MSI' ] filter (with includes ) => array // output only computers with 'screen-15' feature computers . filter ( computer => computer . features . includes ( 'screen-15' )) // [{id: 'pc-1', ..etc}, {id: 'pc-2', ...}] some => boolean // test if there is any computer with ''ssd-2to' feature computers . some ( computer => computer . features . includes ( 'ssd-2to' )) // output false every => boolean // Test if every computer has feature like 'ssd-1to' or 'keyboard' computers . every ( computer => computer . features . includes ( 'ssd-1to' )) // output false computers . every ( computer => computer . features . includes ( 'keyboard' )) // output true find => first element that satisfies the provided testing function // Find every computer which are ''MacBook Pro' (it found one) computers . find ( computer => computer . name === 'MacBook Pro' ) // {id: 'pc-1', name: 'MacBook Pro', ...} reduce => value from the calculation on the preceding element The scheme is : array.reduce((accumulator, element) // Output every computer's features in any array with a spray operators computers . reduce (( allFeatures , computer ) => { return [... allFeatures , ... computer . features ] }, []) // output : // [ 'usb-c', 'screen-15', 'batterie', 'keyboard', 'webcam', 'ssd-1to', // 'usb-a', 'screen-15', 'batterie', 'keyboard', 'ssd-500go', 'usb-a', // 'screen-13', 'batterie', 'keyboard', 'webcam', 'ssd-500go' ]","title":"Array methods in ES6"},{"location":"pages/basis/es6/#exemple-with-filter-and-map","text":"Find every computer with webcam and output their names. const webCamPcName = computers . filter ( computer => computer . features . includes ( 'webcam' ) ) . map ( computer => computer . name ); console . log ( webCamPcName ); // [show MacBook Pro, MSI]","title":"Exemple with filter and map"},{"location":"pages/basis/es6/#rest-parameters","text":"Math.min(100, 10, 1) // retoune 1 const arr = [5, 6, 8, 4, 9] Math.min(arr[0], arr[1], arr[2], arr[3], arr[4]) // Same thing with with Rest Math.min(...arr)","title":"Rest parameters"},{"location":"pages/basis/es6/#spread-operator","text":"// spread with object const personne = { nom : 'mike' , prenom : 'codeur' , adresse : 'bali' } const personne2 = {... personne , rue : 17 } // spread with array let numberStore = [ 0 , 1 , 2 ]; let newNumber = 12 ; numberStore = [... numberStore , newNumber ];","title":"Spread operator"},{"location":"pages/basis/es6/#promise-async-await","text":"Promise - JavaScript | MDN Voir le cours plus \u00e9volu\u00e9 dans advanced async-await et callback Create the promise : //cr\u00e9ation d'un promise function simulationFetch ( duration = 0 ) { return new Promise (( resolve , reject ) => { setTimeout (() => { if ( duration > 400 ) { reject ( `KO Timeout` ) } else { resolve ( `OK` ) } }, duration ) }) } Use the promise simulationFetch ( 100 ). then ( callBackOK , callBakcError ) simulationFetch ( 100 ). then ( e => console . log ( e ), err => console . error ( err ), ) // OK simulationFetch ( 500 ). then ( e => console . log ( e ), err => console . error ( err ), ) // KO Use the promise with async/await async function simulationFetchAsyncSuccess () { const result = await simulationFetch ( 200 ) return `success: ${ result } ` } async function simulationFetchAsyncFailed () { const result = await simulationFetch ( 500 ) return `failed: ${ result } ` // ne devrait pas etre execut\u00e9 } async function simulationFetchAsyncCatch () { let result try { result = await simulationFetch ( 500 , true ) return `failed: ${ result } ` // this would not be executed } catch ( error ) { return `failed and recovered: ${ error } ` } }","title":"Promise Async Await"},{"location":"pages/basis/events/","text":"Events in js onclick <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" > Pas d 'information</h1> <button onclick=\"handleClick()\">Click me</button> </div> <script> function handleClick() { var date = new Date().toLocaleDateString() var time = new Date().toLocaleTimeString() var label = ' Nous sommes le ' + date + ' il est ' + time document.getElementById(' title ' ). innerText = label } < /script> < /body> < /html> onmouseenter and onmouseleave <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" onmouseover = \"handleClick()\" > Pas d 'information</h1> <button onclick=\"handleClick()\" onmouseover=\"handleClick()\"> Click me </button> <div style=\"background-color: lightblue\" onmouseenter=\"handleClick()\"> entre ici </div> <div style=\"background-color: lightcoral\" onmouseleave=\"handleClick()\"> sort d' ici < /div> < /div> < script > function handleClick () { var date = new Date (). toLocaleDateString () var time = new Date (). toLocaleTimeString () var label = 'Nous sommes le ' + date + ' il est ' + time document . getElementById ( 'title' ). innerText = label } < /script> < /body> < /html> addEventListener with keydown Le lien vers la doc HTML DOM Document addEventListener() Method <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" onmouseover = \"handleClick()\" > Pas d 'information</h1> <button onclick=\"document.removeEventListener(' keydown ',handlePress)\"> supprime le listener </button> <div style=\"background-color: lightblue\" onmouseenter=\"handleClick()\"> entre ici </div> <div style=\"background-color: lightcoral\" onmouseleave=\"handleClick()\"> sort d' ici < /div> < /div> < script > function handleClick () { var date = new Date (). toLocaleDateString () var time = new Date (). toLocaleTimeString () var label = 'Nous sommes le ' + date + ' il est ' + time document . getElementById ( 'title' ). innerText = label } function handlePress ( event ) { var name = event . key var code = event . code console . log ( 'name ' + name + ' : code ' + code ) if ( code === 'Enter' || code === 'ArrowDown ' || code === 'ArrowUp' ) { handleClick () } } //add keydown Listener document . addEventListener ( 'keydown' , handlePress ) < /script> < /body> < /html>","title":"Events in js"},{"location":"pages/basis/events/#events-in-js","text":"onclick <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" > Pas d 'information</h1> <button onclick=\"handleClick()\">Click me</button> </div> <script> function handleClick() { var date = new Date().toLocaleDateString() var time = new Date().toLocaleTimeString() var label = ' Nous sommes le ' + date + ' il est ' + time document.getElementById(' title ' ). innerText = label } < /script> < /body> < /html> onmouseenter and onmouseleave <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" onmouseover = \"handleClick()\" > Pas d 'information</h1> <button onclick=\"handleClick()\" onmouseover=\"handleClick()\"> Click me </button> <div style=\"background-color: lightblue\" onmouseenter=\"handleClick()\"> entre ici </div> <div style=\"background-color: lightcoral\" onmouseleave=\"handleClick()\"> sort d' ici < /div> < /div> < script > function handleClick () { var date = new Date (). toLocaleDateString () var time = new Date (). toLocaleTimeString () var label = 'Nous sommes le ' + date + ' il est ' + time document . getElementById ( 'title' ). innerText = label } < /script> < /body> < /html> addEventListener with keydown Le lien vers la doc HTML DOM Document addEventListener() Method <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" onmouseover = \"handleClick()\" > Pas d 'information</h1> <button onclick=\"document.removeEventListener(' keydown ',handlePress)\"> supprime le listener </button> <div style=\"background-color: lightblue\" onmouseenter=\"handleClick()\"> entre ici </div> <div style=\"background-color: lightcoral\" onmouseleave=\"handleClick()\"> sort d' ici < /div> < /div> < script > function handleClick () { var date = new Date (). toLocaleDateString () var time = new Date (). toLocaleTimeString () var label = 'Nous sommes le ' + date + ' il est ' + time document . getElementById ( 'title' ). innerText = label } function handlePress ( event ) { var name = event . key var code = event . code console . log ( 'name ' + name + ' : code ' + code ) if ( code === 'Enter' || code === 'ArrowDown ' || code === 'ArrowUp' ) { handleClick () } } //add keydown Listener document . addEventListener ( 'keydown' , handlePress ) < /script> < /body> < /html>","title":"Events in js"},{"location":"pages/basis/html/","text":"Modern HTML5 Client-side form validation Doc Mozilla sur la validation HTML HTML Tag validation Use tag validation (type, min, max ...) with required if data is required. < input type = 'username' name = \"username\" min = \"2\" , max = \"12\" required > Use it for data-validation in form : Input form with js Use form with javascript for trigger input element. < form onsubmit = \"myFunction()\" > Enter name : < input type = \"text\" name = \"fname\" > </ form > SEO Open Graph (for social) in meta use OG meta for your social media SEO < html xmlns:og = \"http://ogp.me/ns#\" > < head > < title > Open Graph : pourquoi utiliser les balises OGP ? </ title > < meta property = \"og:title\" content = \"Article sur l'Open Graph par Referenseo\" /> < meta property = \"og:type\" content = \"article\" /> < meta property = \"og:url\" content = \"http://www.yakaferci.com/open-graph/\" /> < meta property = \"og:image\" content = \"http://referenseo/images/open-graph.jpg\" /> < meta property = \"og:site_name\" content = \"Agence de r\u00e9f\u00e9rencement Referenseo\" /> ... </ head > ... </ html > Link to OG Semantic use Semantic HTML5 element instead of div. Performance Content visibility Le content visibility increase your css performance loading ! Toutes les info sur le content visibility ici Async / Defer Instead to put script below body for HTML loading, use async or defer Web component Shadow DOM","title":"HTML"},{"location":"pages/basis/html/#modern-html5","text":"","title":"Modern HTML5"},{"location":"pages/basis/html/#client-side-form-validation","text":"Doc Mozilla sur la validation HTML","title":"Client-side form validation"},{"location":"pages/basis/html/#html-tag-validation","text":"Use tag validation (type, min, max ...) with required if data is required. < input type = 'username' name = \"username\" min = \"2\" , max = \"12\" required > Use it for data-validation in form :","title":"HTML Tag validation"},{"location":"pages/basis/html/#input-form-with-js","text":"Use form with javascript for trigger input element. < form onsubmit = \"myFunction()\" > Enter name : < input type = \"text\" name = \"fname\" > </ form >","title":"Input form with js"},{"location":"pages/basis/html/#seo","text":"","title":"SEO"},{"location":"pages/basis/html/#open-graph-for-social-in-meta","text":"use OG meta for your social media SEO < html xmlns:og = \"http://ogp.me/ns#\" > < head > < title > Open Graph : pourquoi utiliser les balises OGP ? </ title > < meta property = \"og:title\" content = \"Article sur l'Open Graph par Referenseo\" /> < meta property = \"og:type\" content = \"article\" /> < meta property = \"og:url\" content = \"http://www.yakaferci.com/open-graph/\" /> < meta property = \"og:image\" content = \"http://referenseo/images/open-graph.jpg\" /> < meta property = \"og:site_name\" content = \"Agence de r\u00e9f\u00e9rencement Referenseo\" /> ... </ head > ... </ html > Link to OG","title":"Open Graph (for social) in meta"},{"location":"pages/basis/html/#semantic","text":"use Semantic HTML5 element instead of div.","title":"Semantic"},{"location":"pages/basis/html/#performance","text":"","title":"Performance"},{"location":"pages/basis/html/#content-visibility","text":"Le content visibility increase your css performance loading ! Toutes les info sur le content visibility ici","title":"Content visibility"},{"location":"pages/basis/html/#async-defer","text":"Instead to put script below body for HTML loading, use async or defer","title":"Async / Defer"},{"location":"pages/basis/html/#web-component","text":"","title":"Web component"},{"location":"pages/basis/html/#shadow-dom","text":"","title":"Shadow DOM"},{"location":"pages/basis/js-basics/","text":"Javascript basics html DOM creation create HTML elements and element content < script > document . getElementById ( 'title' ). innerHTML = 'Welcome!' //h2 var newH2 = document . createElement ( 'h2' ) newH2 . innerHTML = 'Introduction' //add h2 to root var rootDiv = document . getElementById ( 'root' ) rootDiv . appendChild ( newH2 ) //add p to root var newP = document . createElement ( 'p' ) newP . innerHTML = 'Ceci est un paragraphe' rootDiv . appendChild ( newP ) //add footer to root var newFooter = document . createElement ( 'footer' ) newFooter . innerHTML = 'Site cr\u00e9\u00e9 par ..' rootDiv . appendChild ( newFooter ) < /script> Create attributes <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" > Hello World < /h1> < /div> < script > var rootDiv = document . getElementById ( 'root' ) var styleAttr = document . createAttribute ( 'style' ) styleAttr . value = 'background-color:powderblue;' rootDiv . setAttributeNode ( styleAttr ) < /script> < /body> < /html> for loop in array * var langageList = [ 'html' , 'css' , 'js' ] for ( var i = 0 ; i < langageList . length ; i ++ ) { console . log ( langageList [ i ]) } *we use ES6 functionnal programming now with map, find, filter ... Splice for array // remove last element in array langageList . splice ( langageList . length - 1 ) [Mozilla splice Docs]( JavaScript Array splice() Method Object Docs JavaScript Objects Docs for...in - JavaScript Docs for ( var key in personne ) { console . log ( key ) } include test an array inside object var personne = { nom : 'Chirac' , langages : [ 'html' , 'css' , 'js' ], } if ( personne . langages . includes ( 'js' )) { console . log ( 'condition langages est ok' ) } else { console . error ( 'condition langages est ko' ) } Pop, Push, Shift and Unshift Array Methods in JavaScript JavaScript gives us four methods to add or remove items from the beginning or end of arrays: pop() : Remove an item from the end of an array let cats = [ 'Bob' , 'Willy' , 'Mini' ]; cats . pop (); // ['Bob', 'Willy'] pop() returns the removed item. push() : Add items to the end of an array let cats = [ 'Bob' ]; cats . push ( 'Willy' ); // ['Bob', 'Willy'] cats . push ( 'Puff' , 'George' ); // ['Bob', 'Willy', 'Puff', 'George'] push() returns the new array length. shift() : Remove an item from the beginning of an array let cats = [ 'Bob' , 'Willy' , 'Mini' ]; cats . shift (); // ['Willy', 'Mini'] shift() returns the removed item. unshift() : Add items to the beginning of an array let cats = [ 'Bob' ]; cats . unshift ( 'Willy' ); // ['Willy', 'Bob'] cats . unshift ( 'Puff' , 'George' ); // ['Puff', 'George', 'Willy', 'Bob'] unshift() returns the new array length.","title":"Javascript basics"},{"location":"pages/basis/js-basics/#javascript-basics","text":"","title":"Javascript basics"},{"location":"pages/basis/js-basics/#html-dom-creation","text":"create HTML elements and element content < script > document . getElementById ( 'title' ). innerHTML = 'Welcome!' //h2 var newH2 = document . createElement ( 'h2' ) newH2 . innerHTML = 'Introduction' //add h2 to root var rootDiv = document . getElementById ( 'root' ) rootDiv . appendChild ( newH2 ) //add p to root var newP = document . createElement ( 'p' ) newP . innerHTML = 'Ceci est un paragraphe' rootDiv . appendChild ( newP ) //add footer to root var newFooter = document . createElement ( 'footer' ) newFooter . innerHTML = 'Site cr\u00e9\u00e9 par ..' rootDiv . appendChild ( newFooter ) < /script> Create attributes <! DOCTYPE html > < html > < body > < div id = \"root\" > < h1 id = \"title\" > Hello World < /h1> < /div> < script > var rootDiv = document . getElementById ( 'root' ) var styleAttr = document . createAttribute ( 'style' ) styleAttr . value = 'background-color:powderblue;' rootDiv . setAttributeNode ( styleAttr ) < /script> < /body> < /html>","title":"html DOM creation"},{"location":"pages/basis/js-basics/#for-loop-in-array","text":"var langageList = [ 'html' , 'css' , 'js' ] for ( var i = 0 ; i < langageList . length ; i ++ ) { console . log ( langageList [ i ]) } *we use ES6 functionnal programming now with map, find, filter ...","title":"for loop in array*"},{"location":"pages/basis/js-basics/#splice-for-array","text":"// remove last element in array langageList . splice ( langageList . length - 1 ) [Mozilla splice Docs]( JavaScript Array splice() Method","title":"Splice for array"},{"location":"pages/basis/js-basics/#object-docs","text":"JavaScript Objects Docs for...in - JavaScript Docs for ( var key in personne ) { console . log ( key ) }","title":"Object Docs"},{"location":"pages/basis/js-basics/#include-test-an-array-inside-object","text":"var personne = { nom : 'Chirac' , langages : [ 'html' , 'css' , 'js' ], } if ( personne . langages . includes ( 'js' )) { console . log ( 'condition langages est ok' ) } else { console . error ( 'condition langages est ko' ) }","title":"include test an array inside object"},{"location":"pages/basis/js-basics/#pop-push-shift-and-unshift-array-methods-in-javascript","text":"JavaScript gives us four methods to add or remove items from the beginning or end of arrays:","title":"Pop, Push, Shift and Unshift Array Methods in JavaScript"},{"location":"pages/basis/js-basics/#pop-remove-an-item-from-the-end-of-an-array","text":"let cats = [ 'Bob' , 'Willy' , 'Mini' ]; cats . pop (); // ['Bob', 'Willy'] pop() returns the removed item.","title":"pop(): Remove an item from the end of an array"},{"location":"pages/basis/js-basics/#push-add-items-to-the-end-of-an-array","text":"let cats = [ 'Bob' ]; cats . push ( 'Willy' ); // ['Bob', 'Willy'] cats . push ( 'Puff' , 'George' ); // ['Bob', 'Willy', 'Puff', 'George'] push() returns the new array length.","title":"push(): Add items to the end of an array"},{"location":"pages/basis/js-basics/#shift-remove-an-item-from-the-beginning-of-an-array","text":"let cats = [ 'Bob' , 'Willy' , 'Mini' ]; cats . shift (); // ['Willy', 'Mini'] shift() returns the removed item.","title":"shift(): Remove an item from the beginning of an array"},{"location":"pages/basis/js-basics/#unshift-add-items-to-the-beginning-of-an-array","text":"let cats = [ 'Bob' ]; cats . unshift ( 'Willy' ); // ['Willy', 'Bob'] cats . unshift ( 'Puff' , 'George' ); // ['Puff', 'George', 'Willy', 'Bob'] unshift() returns the new array length.","title":"unshift(): Add items to the beginning of an array"},{"location":"pages/basis/js-loop/","text":"Initial data let list = [ 4 , 5 , 6 ]; 'for in' iterate on keys for ( let i in list ) { console . log ( i ); // Output: 0, 1, 2, console . log ( list [ i ]); // Output: 4, 5, 6 } 'for of' iterate on values for ( let i of list ) { console . log ( i ); // output: \"4\", \"5\", \"6\" } 'forEach' iterate on values with a callback list . forEach ( ( id ) => { console . log ( id ); // Output: \"4\", \"5\", \"6\" }) Bonus with promise Promise with for..of Ouput the user ID with 1000 ms delay one per one // Create the promise with timeout const getUserID = ( id ) => { return new Promise ( ( resolve ) => { setTimeout (() => { console . log ( `Got user ID ${ id } ` ); resolve ( id ); }, 1000 ); }) } ( async function () { const users = [ 30 , 20 , 10 , 5 , 1 ]; for ( const user of users ) { await getUserID ( user ) } })() // output at 1000 ms frequence one per one the users (5 x 1000 ms): // 'Got user ID 30' >1000 ms // 'Got user ID 20' >1000 ms // 'Got user ID 10' >1000 ms // 'Got user ID 5' >1000 ms // 'Got user ID 1' >1000 ms Promise with forEach, map or for // with forEach, map, for, it run in parrallels users . forEach ( async ( user ) => { await getUserID ( user ) }) // output with 1000 ms delay All the users in one time:","title":"Js loop"},{"location":"pages/basis/js-loop/#initial-data","text":"let list = [ 4 , 5 , 6 ];","title":"Initial data"},{"location":"pages/basis/js-loop/#for-in-iterate-on-keys","text":"for ( let i in list ) { console . log ( i ); // Output: 0, 1, 2, console . log ( list [ i ]); // Output: 4, 5, 6 }","title":"'for in' iterate on keys"},{"location":"pages/basis/js-loop/#for-of-iterate-on-values","text":"for ( let i of list ) { console . log ( i ); // output: \"4\", \"5\", \"6\" }","title":"'for of' iterate on values"},{"location":"pages/basis/js-loop/#foreach-iterate-on-values-with-a-callback","text":"list . forEach ( ( id ) => { console . log ( id ); // Output: \"4\", \"5\", \"6\" })","title":"'forEach' iterate on values with a callback"},{"location":"pages/basis/js-loop/#bonus-with-promise","text":"","title":"Bonus with promise"},{"location":"pages/basis/js-loop/#promise-with-forof","text":"Ouput the user ID with 1000 ms delay one per one // Create the promise with timeout const getUserID = ( id ) => { return new Promise ( ( resolve ) => { setTimeout (() => { console . log ( `Got user ID ${ id } ` ); resolve ( id ); }, 1000 ); }) } ( async function () { const users = [ 30 , 20 , 10 , 5 , 1 ]; for ( const user of users ) { await getUserID ( user ) } })() // output at 1000 ms frequence one per one the users (5 x 1000 ms): // 'Got user ID 30' >1000 ms // 'Got user ID 20' >1000 ms // 'Got user ID 10' >1000 ms // 'Got user ID 5' >1000 ms // 'Got user ID 1' >1000 ms","title":"Promise with for..of"},{"location":"pages/basis/js-loop/#promise-with-foreach-map-or-for","text":"// with forEach, map, for, it run in parrallels users . forEach ( async ( user ) => { await getUserID ( user ) }) // output with 1000 ms delay All the users in one time:","title":"Promise with forEach, map or for"},{"location":"pages/react/useRef-or-useState/","text":"useRef or useState Counter App to see useRef does not rerender If you create a simple counter app using useRef to store the state: import { useRef } from \"react\"; const App = () => { const count = useRef(0); return ( <div> <h2>count: {count.current}</h2> <button onClick={() => { count.current = count.current + 1; console.log(count.current); }} >increase count </button> </div> ); }; If you click on the button, <h2>count: {count.current}</h2> this value will not change because component is NOT RE-RENDERING. If you check the console console.log(count.current) , you will see that value is actually increasing but since the component is not rerendering, UI does not get updated. If you set the state with useState , clicking on the button would rerender the component so UI would get updated. Prevent the unnecessary re-renderings while typing into input . Rerendering is an expensive operation. In some cases you do not want to keep rerendering the app. For example, when you store the input value in state to create a controlled component. In this case for each keystroke you would rerender the app. If you use the ref to get a reference to the DOM element, with useState you would rerender the component only once: import { useState, useRef } from \"react\"; const App = () => { const [value, setValue] = useState(\"\"); const valueRef = useRef(); const handleClick = () => { console.log(valueRef); setValue(valueRef.current.value); }; return ( <div> <h4>Input Value: {value}</h4> <input ref={valueRef} /> <button onClick={handleClick}>click</button> </div> ); }; Prevent the infinite loop inside useEffect to create a simple flipping animation, we need to 2 state values. one is a boolean value to flip or not in an interval, another one is to clear the subscription when we leave the component: const [ isFlipping , setIsFlipping ] = useState ( false ); let flipInterval = useRef < ReturnType < typeof setInterval >> (); useEffect (() => { startAnimation (); return () => flipInterval . current && clearInterval ( flipInterval . current ); }, []); const startAnimation = () => { flipInterval . current = setInterval (() => { setIsFlipping (( prevFlipping ) => ! prevFlipping ); }, 10000 ); }; setInterval returns an id and we pass it to clearInterval to end the subscription when we leave the component. flipInterval.current is either null or this id. If we did not use ref here, everytime we switched from null to id or from id to null, this component would rerender and this would create an infinite loop. If you do not need to update UI, use useRef to store state variables. Let's say in react native app, we set the sound for certain actions which have no effect on UI. For one state variable it might not be that much performance savings but If you play a game and you need to set different sound based on game status. const popSoundRef = useRef < Audio . Sound | null > ( null ); const pop2SoundRef = useRef < Audio . Sound | null > ( null ); const winSoundRef = useRef < Audio . Sound | null > ( null ); const lossSoundRef = useRef < Audio . Sound | null > ( null ); const drawSoundRef = useRef < Audio . Sound | null > ( null ); If I used useState , I would keep rerendering every time I change a state value.","title":"useRef or useState"},{"location":"pages/react/useRef-or-useState/#useref-or-usestate","text":"Counter App to see useRef does not rerender If you create a simple counter app using useRef to store the state: import { useRef } from \"react\"; const App = () => { const count = useRef(0); return ( <div> <h2>count: {count.current}</h2> <button onClick={() => { count.current = count.current + 1; console.log(count.current); }} >increase count </button> </div> ); }; If you click on the button, <h2>count: {count.current}</h2> this value will not change because component is NOT RE-RENDERING. If you check the console console.log(count.current) , you will see that value is actually increasing but since the component is not rerendering, UI does not get updated. If you set the state with useState , clicking on the button would rerender the component so UI would get updated. Prevent the unnecessary re-renderings while typing into input . Rerendering is an expensive operation. In some cases you do not want to keep rerendering the app. For example, when you store the input value in state to create a controlled component. In this case for each keystroke you would rerender the app. If you use the ref to get a reference to the DOM element, with useState you would rerender the component only once: import { useState, useRef } from \"react\"; const App = () => { const [value, setValue] = useState(\"\"); const valueRef = useRef(); const handleClick = () => { console.log(valueRef); setValue(valueRef.current.value); }; return ( <div> <h4>Input Value: {value}</h4> <input ref={valueRef} /> <button onClick={handleClick}>click</button> </div> ); }; Prevent the infinite loop inside useEffect to create a simple flipping animation, we need to 2 state values. one is a boolean value to flip or not in an interval, another one is to clear the subscription when we leave the component: const [ isFlipping , setIsFlipping ] = useState ( false ); let flipInterval = useRef < ReturnType < typeof setInterval >> (); useEffect (() => { startAnimation (); return () => flipInterval . current && clearInterval ( flipInterval . current ); }, []); const startAnimation = () => { flipInterval . current = setInterval (() => { setIsFlipping (( prevFlipping ) => ! prevFlipping ); }, 10000 ); }; setInterval returns an id and we pass it to clearInterval to end the subscription when we leave the component. flipInterval.current is either null or this id. If we did not use ref here, everytime we switched from null to id or from id to null, this component would rerender and this would create an infinite loop. If you do not need to update UI, use useRef to store state variables. Let's say in react native app, we set the sound for certain actions which have no effect on UI. For one state variable it might not be that much performance savings but If you play a game and you need to set different sound based on game status. const popSoundRef = useRef < Audio . Sound | null > ( null ); const pop2SoundRef = useRef < Audio . Sound | null > ( null ); const winSoundRef = useRef < Audio . Sound | null > ( null ); const lossSoundRef = useRef < Audio . Sound | null > ( null ); const drawSoundRef = useRef < Audio . Sound | null > ( null ); If I used useState , I would keep rerendering every time I change a state value.","title":"useRef or useState"},{"location":"pages/tips/css-reset/","text":"HTML CSS Reset *, * :: before , * :: after { margin : 0 ; padding : 0 ; box-sizing : inherit ; } html { box-sizing : border-box ; font-size : 62.5 % } body { font-family : \u2018 Lato \u2019 ; color : #ddd ; } . container { }","title":"Css reset"},{"location":"pages/tips/css/shruti-balasa/css-animation-line-hover/","text":"CSS line animation on hover See this text underline animation? Looks really nice right? Let\u2019s go straight into understanding how to create it step-by-step. Text underline animation on hover The Markup HTML The CSS There are two ways to achieve the animation Using **::after** pseudo-element In this method we can create a pseudo-element, position it below the link using position: absolute , give it a 2px height and animate the width from 0 to 100%. Something like this: Method 1: Using pseudo element And it works! Here\u2019s the working demo . The only problem with this method is that, if the link text flows into next line, the underline appears only on the first line! Remove display:inline-block on the a element in the above demo and try it out for yourself. So if you need the animation to work on a multi-line text, follow the next method. Using **background** property In this method, we use an underline background image and position it at the bottom of the link. We set the size to 0 width initially and set it to 100% on hover, For the background image, we don\u2019t need an actual image. We can use linear gradient along with other properties like this. Background values to create an underline As you can see, we have used the background-image property to set the color of the underline. The background-size property is needed to specify that the image (underline) occupies 100% width and 2px height. The background-position property is used to specify the position and the last line makes the background image not repeat. If you use the above CSS, you\u2019ll get an underline right away. But we need an underline only on hover. So, let\u2019s change the second line above to: Initial background-size is 0 And on hover, we change the background-size to 100% 2px . Also, add some transition. This will be the full CSS: Full CSS for underline animation Unlike the previous method, this underline flows into multiple lines. See it for yourself in the working demo . Bonus If you want the underline to animate from center instead of left to right, change the background-position value to center bottom. On hover, the line appears from left to right. On leaving the mouse, if you want it to exit to the right like the below demo: Starts from left and leaves to right You need to change the background-position to following: Change in background-position values If you found the background properties and their values confusing, I encourage you to visit the MDN docs for background-image , background-position and background-size . That\u2019s a wrap! Hope you learnt something new this week. Reply to this email and let me know if you are particularly interested in learning a trick you\u2019ve seen somewhere.","title":"CSS line animation on hover"},{"location":"pages/tips/css/shruti-balasa/css-animation-line-hover/#css-line-animation-on-hover","text":"See this text underline animation? Looks really nice right? Let\u2019s go straight into understanding how to create it step-by-step. Text underline animation on hover The Markup HTML The CSS There are two ways to achieve the animation Using **::after** pseudo-element In this method we can create a pseudo-element, position it below the link using position: absolute , give it a 2px height and animate the width from 0 to 100%. Something like this: Method 1: Using pseudo element And it works! Here\u2019s the working demo . The only problem with this method is that, if the link text flows into next line, the underline appears only on the first line! Remove display:inline-block on the a element in the above demo and try it out for yourself. So if you need the animation to work on a multi-line text, follow the next method. Using **background** property In this method, we use an underline background image and position it at the bottom of the link. We set the size to 0 width initially and set it to 100% on hover, For the background image, we don\u2019t need an actual image. We can use linear gradient along with other properties like this. Background values to create an underline As you can see, we have used the background-image property to set the color of the underline. The background-size property is needed to specify that the image (underline) occupies 100% width and 2px height. The background-position property is used to specify the position and the last line makes the background image not repeat. If you use the above CSS, you\u2019ll get an underline right away. But we need an underline only on hover. So, let\u2019s change the second line above to: Initial background-size is 0 And on hover, we change the background-size to 100% 2px . Also, add some transition. This will be the full CSS: Full CSS for underline animation Unlike the previous method, this underline flows into multiple lines. See it for yourself in the working demo . Bonus If you want the underline to animate from center instead of left to right, change the background-position value to center bottom. On hover, the line appears from left to right. On leaving the mouse, if you want it to exit to the right like the below demo: Starts from left and leaves to right You need to change the background-position to following: Change in background-position values If you found the background properties and their values confusing, I encourage you to visit the MDN docs for background-image , background-position and background-size . That\u2019s a wrap! Hope you learnt something new this week. Reply to this email and let me know if you are particularly interested in learning a trick you\u2019ve seen somewhere.","title":"CSS line animation on hover"},{"location":"pages/tips/css/shruti-balasa/display-contents-in-CSS-rule/","text":"Display contents in CSS rule Hey! Welcome to the second issue of this newsletter. Let\u2019s create a responsive blog post display layout using the lesser known CSS rule display: contents . Responsive Blog Post Display using Grid and display:contents Consider this blog post display section. On a wider screen, we want the image to be on the right separated from the text. While on a mobile screen, we want the image to appear in between our heading and the paragraph. Desktop and mobile layouts This layout could easily be a hero section of your website too. There are multiple ways to approach this, based on the HTML markup. Likely, your markup looks something like this: HTML With this markup, the desktop layout is straight forward. You can use flexbox like this: Desktop layout with flexbox But for smaller screens, how do you get that image in between heading and paragraph? Introducting **display: contents** CSS rule When you set use display: contents on an element, that element\u2019s children become direct children of the element\u2019s parent. It\u2019s like, that element disappears from the Markup. So, in our case, for mobile layout, if we use display: contents on our .text element, it gets ignored: display: contents makes the element get ignored And now it\u2019s equivalent to the below markup, for styling: Now we can use flexbox for the .container with flex-direction as column and then use order property to get the image element in between heading and para! \ud83e\ude84 Here\u2019s the simplified CSS snippet: Simplified CSS snippet You can see the full working demo on Codepen Responsive blog post display Image appears in different places on mobile and in desktop layouts codepen.io","title":"Display contents in CSS rule"},{"location":"pages/tips/css/shruti-balasa/display-contents-in-CSS-rule/#display-contents-in-css-rule","text":"Hey! Welcome to the second issue of this newsletter. Let\u2019s create a responsive blog post display layout using the lesser known CSS rule display: contents . Responsive Blog Post Display using Grid and display:contents Consider this blog post display section. On a wider screen, we want the image to be on the right separated from the text. While on a mobile screen, we want the image to appear in between our heading and the paragraph. Desktop and mobile layouts This layout could easily be a hero section of your website too. There are multiple ways to approach this, based on the HTML markup. Likely, your markup looks something like this: HTML With this markup, the desktop layout is straight forward. You can use flexbox like this: Desktop layout with flexbox But for smaller screens, how do you get that image in between heading and paragraph? Introducting **display: contents** CSS rule When you set use display: contents on an element, that element\u2019s children become direct children of the element\u2019s parent. It\u2019s like, that element disappears from the Markup. So, in our case, for mobile layout, if we use display: contents on our .text element, it gets ignored: display: contents makes the element get ignored And now it\u2019s equivalent to the below markup, for styling: Now we can use flexbox for the .container with flex-direction as column and then use order property to get the image element in between heading and para! \ud83e\ude84 Here\u2019s the simplified CSS snippet: Simplified CSS snippet You can see the full working demo on Codepen Responsive blog post display Image appears in different places on mobile and in desktop layouts codepen.io","title":"Display contents in CSS rule"},{"location":"pages/tools/","tags":["web","basis"],"text":"","title":"Tools"},{"location":"pages/tools/git/","text":"Git Master commands Github base List the actual Config setup from current directory $ git config -l Setup the Global Config # Exemple $ git config --global user.name electroheadfx $ git config --global user.email \"laurent@efxdesign.fr\" Setup the local Config (per project) # Exemple $ git config user.name efx $ git config user.email \"laurent@electroheadfx.fr\" Setup for mac lf/cr git config --global core.autocrlf input Setup for windows lf/cr git config --global core.autocrlf true Setup for rebase git config --global credential.helper store git config --global pull.rebase true git config --global merge.ff true Create a git project # Create a folder $ mkdir folder && cd folder # init git (when the project is new) $ git init # Add origin url from remote $ git remote add origin https://github.com/electroheadfx/test.git # Now you can push the code after you will add file then commit $ git push -u origin master Add file and commit # add folder, files $ git add [ folders ] [ file1 ] [ file2 ] # or add all from current directory $ git add . # commit the added file with a message $ git commit -m \u201dmsg\u201d # Push on server to origin from master $ git push -u origin master Git status and log # Commit status $ git status # See all the commits done $ git log # See all the i commits $ git log -n i # See All the diff before git add $ git diff Revert a file to last comit git checkout file Git Branches # cr\u00e9\u00e9 une branche au repo $ git branch myfeature # see all branchs list $ git branch # switch to myfeature branch $ git checkout myfeature # see the diff between 2 branch $ git diff master...myfeature # Create master branch $ git branch master # merge branch my feature on master $ git merge myfeature # delete myfeature branch $ git branch -d myfeature Get a GIT repository # Create a test folder with the repo $ git clone https://github.com/electroheadfx/test.git Delete/add a folder and commit # Remove a folder $ git rm -rf <folder> # Remove files $ git rm file1 file2 # Commit with a message $ git commit -m \u201cmsg\u201c # Push the commit on server to master like origin, after just do git push $ git push -u origin master # Add a folder or file $ git add <folder> file1 file2 # commit again $ git commit -m \u201cmsg\u201c # Push to the server a new version $ git push -u origin master # You can do the shorter version if its always master $ git push Push branch commits to github # Setuo origin remote $ git remote add origin https://github.com/electroheadfx/test.git $ git push -u origin master # list the remote $ git remote -v # if a problem, you can remove it with: $ Add gitignore git commit # Create gitignore $ touch .gitignore # Edit it in vs code for add files to ignore $ code .gitignore # Add it to repo $ git add .gitignore # Commit it $ git commit -m \"add gitignore\" Update Your repo There 2 ways to do it : # 1- In old day we get the repo with fetch and merge FETCH_HEAD $ git fetch https://github.com/electroheadfx/test.git $ git merge FETCH_HEAD # 2- Now its easier to pull directely : $ git pull https://github.com/electroheadfx/test.git # If there is conflit, fix them in code and does a : $ git commit -m \"update\" GIT Rebase process Setup to do on the repo before git config --global credential.helper store git config --global pull.rebase true git config --global merge.ff true Switch on develop : git checkout develop Create your own branch git checkout -b feature/name_of_the_feature We flat a commit series where N is the number of previous commit to squash git rebase -i HEAD~N Before to commit, we switch on develop branch and update it: git checkout develop git pull We switch back to feature branch git checkout feature/name_of_the_feature we update the branch from develop rebase command : git rebase develop feature/name_of_the_feature is update, we swich on develop for merge the branch git checkout develop git merge feature/name_of_the_feature Push all on the server git push We can destroy the feature/name_of_the_feature git branch -D feature/name_of_the_feature Branch commands Rename a branch (g.g. main to master) git branch -m main master Copy a branch (main to dev branch) git branch -c main dev Delete branch git branch -d dev Git Tools - Restore and reset git restore <a-file-or-a-folder> git reset <pathspec> # is the opposite of : git add <pathspec> # equivalent to : git restore [ --source = <tree-ish> ] --staged <pathspec> Git - git-reset Documentation Git Tools - Stashing and Cleaning git status Changes to be committed: ( use \"git reset HEAD <file>...\" to unstage ) modified: index.html git stash git status # On branch master nothing to commit, working directory clean # list stored stashes git stash list stash@ { 0 } : WIP on master: 049d078 Create index file stash@ { 1 } : WIP on master: c264051 Revert \"Add file_size\" stash@ { 2 } : WIP on master: 21d80a5 Add number to log # apply the previous stash git stash apply # apply the stash@{2} git stash apply stash@ { 2 } # Drop any stash git stash drop stash@ { 2 } Git - Stashing and Cleaning Git subtree : Publish a folder to a branch in github # for exemple you add dist (static files) to our repo git add dist && git commit -m \"Initial dist subtree commit\" # Push dist folder to github gh-pages branch git subtree push --prefix dist origin gh-pages # then at each normal push to the main branch, dist is pushed to gh-pages Git subtree script for gh-deploy I create a script called gh-deploy for automate the subtree push: #!/bin/sh if [ -z \" $1 \" ] then echo \"Which folder do you want to deploy to GitHub Pages?\" exit 1 fi git subtree push --prefix $1 origin gh-pages and use the script in this way: git gh-deploy path/to/your/site","title":"Git Master commands"},{"location":"pages/tools/git/#git-master-commands","text":"","title":"Git Master commands"},{"location":"pages/tools/git/#github-base","text":"List the actual Config setup from current directory $ git config -l Setup the Global Config # Exemple $ git config --global user.name electroheadfx $ git config --global user.email \"laurent@efxdesign.fr\" Setup the local Config (per project) # Exemple $ git config user.name efx $ git config user.email \"laurent@electroheadfx.fr\"","title":"Github base"},{"location":"pages/tools/git/#setup-for-mac-lfcr","text":"git config --global core.autocrlf input","title":"Setup for mac lf/cr"},{"location":"pages/tools/git/#setup-for-windows-lfcr","text":"git config --global core.autocrlf true","title":"Setup for windows lf/cr"},{"location":"pages/tools/git/#setup-for-rebase","text":"git config --global credential.helper store git config --global pull.rebase true git config --global merge.ff true","title":"Setup for rebase"},{"location":"pages/tools/git/#create-a-git-project","text":"# Create a folder $ mkdir folder && cd folder # init git (when the project is new) $ git init # Add origin url from remote $ git remote add origin https://github.com/electroheadfx/test.git # Now you can push the code after you will add file then commit $ git push -u origin master Add file and commit # add folder, files $ git add [ folders ] [ file1 ] [ file2 ] # or add all from current directory $ git add . # commit the added file with a message $ git commit -m \u201dmsg\u201d # Push on server to origin from master $ git push -u origin master Git status and log # Commit status $ git status # See all the commits done $ git log # See all the i commits $ git log -n i # See All the diff before git add $ git diff Revert a file to last comit git checkout file","title":"Create a git project"},{"location":"pages/tools/git/#git-branches","text":"# cr\u00e9\u00e9 une branche au repo $ git branch myfeature # see all branchs list $ git branch # switch to myfeature branch $ git checkout myfeature # see the diff between 2 branch $ git diff master...myfeature # Create master branch $ git branch master # merge branch my feature on master $ git merge myfeature # delete myfeature branch $ git branch -d myfeature","title":"Git Branches"},{"location":"pages/tools/git/#get-a-git-repository","text":"# Create a test folder with the repo $ git clone https://github.com/electroheadfx/test.git Delete/add a folder and commit # Remove a folder $ git rm -rf <folder> # Remove files $ git rm file1 file2 # Commit with a message $ git commit -m \u201cmsg\u201c # Push the commit on server to master like origin, after just do git push $ git push -u origin master # Add a folder or file $ git add <folder> file1 file2 # commit again $ git commit -m \u201cmsg\u201c # Push to the server a new version $ git push -u origin master # You can do the shorter version if its always master $ git push Push branch commits to github # Setuo origin remote $ git remote add origin https://github.com/electroheadfx/test.git $ git push -u origin master # list the remote $ git remote -v # if a problem, you can remove it with: $ Add gitignore git commit # Create gitignore $ touch .gitignore # Edit it in vs code for add files to ignore $ code .gitignore # Add it to repo $ git add .gitignore # Commit it $ git commit -m \"add gitignore\"","title":"Get a GIT repository"},{"location":"pages/tools/git/#update-your-repo","text":"There 2 ways to do it : # 1- In old day we get the repo with fetch and merge FETCH_HEAD $ git fetch https://github.com/electroheadfx/test.git $ git merge FETCH_HEAD # 2- Now its easier to pull directely : $ git pull https://github.com/electroheadfx/test.git # If there is conflit, fix them in code and does a : $ git commit -m \"update\"","title":"Update Your repo"},{"location":"pages/tools/git/#git-rebase-process","text":"Setup to do on the repo before git config --global credential.helper store git config --global pull.rebase true git config --global merge.ff true Switch on develop : git checkout develop Create your own branch git checkout -b feature/name_of_the_feature We flat a commit series where N is the number of previous commit to squash git rebase -i HEAD~N Before to commit, we switch on develop branch and update it: git checkout develop git pull We switch back to feature branch git checkout feature/name_of_the_feature we update the branch from develop rebase command : git rebase develop feature/name_of_the_feature is update, we swich on develop for merge the branch git checkout develop git merge feature/name_of_the_feature Push all on the server git push We can destroy the feature/name_of_the_feature git branch -D feature/name_of_the_feature","title":"GIT Rebase process"},{"location":"pages/tools/git/#branch-commands","text":"Rename a branch (g.g. main to master) git branch -m main master Copy a branch (main to dev branch) git branch -c main dev Delete branch git branch -d dev","title":"Branch commands"},{"location":"pages/tools/git/#git-tools-restore-and-reset","text":"git restore <a-file-or-a-folder> git reset <pathspec> # is the opposite of : git add <pathspec> # equivalent to : git restore [ --source = <tree-ish> ] --staged <pathspec> Git - git-reset Documentation","title":"Git Tools - Restore and reset"},{"location":"pages/tools/git/#git-tools-stashing-and-cleaning","text":"git status Changes to be committed: ( use \"git reset HEAD <file>...\" to unstage ) modified: index.html git stash git status # On branch master nothing to commit, working directory clean # list stored stashes git stash list stash@ { 0 } : WIP on master: 049d078 Create index file stash@ { 1 } : WIP on master: c264051 Revert \"Add file_size\" stash@ { 2 } : WIP on master: 21d80a5 Add number to log # apply the previous stash git stash apply # apply the stash@{2} git stash apply stash@ { 2 } # Drop any stash git stash drop stash@ { 2 } Git - Stashing and Cleaning","title":"Git Tools - Stashing and Cleaning"},{"location":"pages/tools/git/#git-subtree-publish-a-folder-to-a-branch-in-github","text":"# for exemple you add dist (static files) to our repo git add dist && git commit -m \"Initial dist subtree commit\" # Push dist folder to github gh-pages branch git subtree push --prefix dist origin gh-pages # then at each normal push to the main branch, dist is pushed to gh-pages","title":"Git subtree : Publish a folder to a branch in github"},{"location":"pages/tools/git/#git-subtree-script-for-gh-deploy","text":"I create a script called gh-deploy for automate the subtree push: #!/bin/sh if [ -z \" $1 \" ] then echo \"Which folder do you want to deploy to GitHub Pages?\" exit 1 fi git subtree push --prefix $1 origin gh-pages and use the script in this way: git gh-deploy path/to/your/site","title":"Git subtree script for gh-deploy"},{"location":"pages/tools/node/","text":"Node Degit install from current working directory mkdir react-prerequis-debutants && cd !$ npx degit https://github.com/MikeCodeur/react-prerequis-debutants npm run install # or npm i npm run test # run test npm run start # or npm run dev (see package.json > scripts) install to a directory repo npx degit https://github.com/MikeCodeur/react-prerequis-debutants repo cd repo npm i npm run start GitHub - Rich-Harris/degit: Straightforward project scaffolding","title":"Node"},{"location":"pages/tools/node/#node","text":"","title":"Node"},{"location":"pages/tools/node/#degit","text":"install from current working directory mkdir react-prerequis-debutants && cd !$ npx degit https://github.com/MikeCodeur/react-prerequis-debutants npm run install # or npm i npm run test # run test npm run start # or npm run dev (see package.json > scripts) install to a directory repo npx degit https://github.com/MikeCodeur/react-prerequis-debutants repo cd repo npm i npm run start GitHub - Rich-Harris/degit: Straightforward project scaffolding","title":"Degit"},{"location":"pages/tools/services/","text":"Services RGPD e-Services - Touati La Motte Rouge Avocats","title":"Services"},{"location":"pages/tools/services/#services","text":"RGPD e-Services - Touati La Motte Rouge Avocats","title":"Services"},{"location":"pages/tools/docker/docker-exercice1/","text":"Create a dockerfile/ex1 Project Based this video GitHub - Antoine-Flo/tuto-docker Setup project The Project setup is available here npm init -y npm i express touch app.js code app.js Enter this code in app.js const express = require ( 'express' ) const app = express () const port = 8080 app.get ( '/' , ( req, res ) = > { res.send ( 'Hello World!' ) }) # it expose port 8080 and log the info app.listen ( port, () = > { console.log ( ` App listening port ${ port } ` ) }) From package.json, change \"main\" to \"app.js\" Create Dockerfile touch Dockerfile touch .dockerignore # ignore node_modules from our repository because it will be installed # from our docker image echo \"node_modules\" > .dockerignore code Dockerfile Put this code in Dockerfile : FROM node:alpine # Setup the working path (where all goes) inside the node image WORKDIR /usr/src/app # install package and install COPY package*.json ./ RUN npm install && npm cache clean --force # copy all the current files in the Image working dir COPY . . # CREATE THE PORT EXPOSE 8080 # execute the process from the app CMD [ \"node\" , \"app.js\" ] Build our Docker Image # . : build from current directory # -t : create the image test-app from the folder efx docker build . -t efx/test-app Test our docker image # Create container from test-app image on port 3000 docker run -p 3000 :8080 efx/test-app How the port work with Docker : Docker Volume #create a volume $ docker volume create data #show volume liste $ docker volume ls DRIVER VOLUME NAME local data #show volume info $ docker volume inspect data #exemple with postgres sync data on volume $ docker run -v postgres-data:/var/lib/postgresql/datap postgres #sync data an external volume on disk without docker volume $ docker run --mount \\ type = bind,source = /home/exyzt/Documents,target = /var/lib/postgresql/data Docker compose #list all compose command available $ docker compose console #create the compose file $ touch docker-compose.yml : cat <<EOF > docker-compose.yml services: app: build: . depends_on: - postgres environment: DATABASE_URL: postgres://user:pass@postgres:5432/db ports: - \"3000:8080\" postgres: # connect to database postgres @ localhost:5432 # on pg_db Database with user: efx, pass: 1234 image: postgres:alpine environment: POSTGRES_PASSWORD: 1234 POSTGRES_DB: pg_db POSTGRES_USER: efx ports: - \"5432:5432\" volumes: - volumePgData:/var/lib/postgresql/data volumes: volumePgData: EOF #Run our compose $ docker-compose up Compose commands #Stop the container(s) using the following command: docker-compose down #Delete all containers using the following command: docker rm -f $( docker ps -a -q ) #Delete all volumes using the following command: docker volume rm $( docker volume ls -q ) #Restart the containers using the following command: docker-compose up -d","title":"Create a dockerfile/ex1"},{"location":"pages/tools/docker/docker-exercice1/#create-a-dockerfileex1","text":"Project Based this video GitHub - Antoine-Flo/tuto-docker","title":"Create a dockerfile/ex1"},{"location":"pages/tools/docker/docker-exercice1/#setup-project","text":"The Project setup is available here npm init -y npm i express touch app.js code app.js Enter this code in app.js const express = require ( 'express' ) const app = express () const port = 8080 app.get ( '/' , ( req, res ) = > { res.send ( 'Hello World!' ) }) # it expose port 8080 and log the info app.listen ( port, () = > { console.log ( ` App listening port ${ port } ` ) }) From package.json, change \"main\" to \"app.js\"","title":"Setup project"},{"location":"pages/tools/docker/docker-exercice1/#create-dockerfile","text":"touch Dockerfile touch .dockerignore # ignore node_modules from our repository because it will be installed # from our docker image echo \"node_modules\" > .dockerignore code Dockerfile Put this code in Dockerfile : FROM node:alpine # Setup the working path (where all goes) inside the node image WORKDIR /usr/src/app # install package and install COPY package*.json ./ RUN npm install && npm cache clean --force # copy all the current files in the Image working dir COPY . . # CREATE THE PORT EXPOSE 8080 # execute the process from the app CMD [ \"node\" , \"app.js\" ]","title":"Create Dockerfile"},{"location":"pages/tools/docker/docker-exercice1/#build-our-docker-image","text":"# . : build from current directory # -t : create the image test-app from the folder efx docker build . -t efx/test-app","title":"Build our Docker Image"},{"location":"pages/tools/docker/docker-exercice1/#test-our-docker-image","text":"# Create container from test-app image on port 3000 docker run -p 3000 :8080 efx/test-app How the port work with Docker :","title":"Test our docker image"},{"location":"pages/tools/docker/docker-exercice1/#docker-volume","text":"#create a volume $ docker volume create data #show volume liste $ docker volume ls DRIVER VOLUME NAME local data #show volume info $ docker volume inspect data #exemple with postgres sync data on volume $ docker run -v postgres-data:/var/lib/postgresql/datap postgres #sync data an external volume on disk without docker volume $ docker run --mount \\ type = bind,source = /home/exyzt/Documents,target = /var/lib/postgresql/data","title":"Docker Volume"},{"location":"pages/tools/docker/docker-exercice1/#docker-compose","text":"#list all compose command available $ docker compose console #create the compose file $ touch docker-compose.yml : cat <<EOF > docker-compose.yml services: app: build: . depends_on: - postgres environment: DATABASE_URL: postgres://user:pass@postgres:5432/db ports: - \"3000:8080\" postgres: # connect to database postgres @ localhost:5432 # on pg_db Database with user: efx, pass: 1234 image: postgres:alpine environment: POSTGRES_PASSWORD: 1234 POSTGRES_DB: pg_db POSTGRES_USER: efx ports: - \"5432:5432\" volumes: - volumePgData:/var/lib/postgresql/data volumes: volumePgData: EOF #Run our compose $ docker-compose up","title":"Docker compose"},{"location":"pages/tools/docker/docker-exercice1/#compose-commands","text":"#Stop the container(s) using the following command: docker-compose down #Delete all containers using the following command: docker rm -f $( docker ps -a -q ) #Delete all volumes using the following command: docker volume rm $( docker volume ls -q ) #Restart the containers using the following command: docker-compose up -d","title":"Compose commands"},{"location":"pages/tools/docker/docker-exercice2/","text":"Create a dockerfile/ex2 App Create app.py : from flask import Flask from redis import Redis , RedisError import os import socket # Connect to Redis redis = Redis ( host = \"redis\" , db = 0 , socket_connect_timeout = 2 , socket_timeout = 2 ) app = Flask ( __name__ ) @app . route ( \"/\" ) def hello (): try : visites = redis . incr ( \"compteur\" ) except RedisError : visites = \"<i>Erreur de connection Redis, compteur desactive</i>\" html = \"<h3>Bonjour {nom} !</h3>\" \\ \"<b>Hostname:</b> {hostname} <br/>\" \\ \"<b>Visites:</b> {visites} <br/>\" \\ \"<p>Abonne toi!</p>\" return html . format ( nom = os . getenv ( \"NOM\" , \"youtube\" ), hostname = socket . gethostname (), visites = visites ) if __name__ == \"__main__\" : app . run ( host = '0.0.0.0' , port = 80 ) Create requirements.txt cat <<EOF > requirements.txt Flask Redis EOF Dockerfile Setup Dockerfile : # start from python slim image FROM python:2.7-slim # definite the working directory on the image : root/app WORKDIR /app # copy all file from current repo to /app COPY . /app # install python libs from requirements.txt RUN pip install -r requirements.txt # expose to the web (port 80) EXPOSE 80 # setup env variable nom=coca ENV NOM coca # execute app.py with python at container creation CMD [ \"python\" , \"app.py\" ] Create the Docker Image with: # create `monimage` from current directory # where Dockerfile exist docker build -t monimage . Docker-compose Create now docker-compose.yml : version: \"3\" services: monapp: image: monimage depends_on: - redis ports: - \"80:80\" networks: - monreseau environment: - NOM=les amis redis: image: redis networks: - monreseau networks: monreseau: We create here 2 services and the networks monapp : Create container from from our monimage created previously. it depends of redis service into monreseau network redis : Create container from redis into monreseau monreseau network declared Run the container with compose # it mount containers and create the services docker-compose up Run the app on : http://localhost:80 ! GitHub Video","title":"Create a dockerfile/ex2"},{"location":"pages/tools/docker/docker-exercice2/#create-a-dockerfileex2","text":"","title":"Create a dockerfile/ex2"},{"location":"pages/tools/docker/docker-exercice2/#app","text":"Create app.py : from flask import Flask from redis import Redis , RedisError import os import socket # Connect to Redis redis = Redis ( host = \"redis\" , db = 0 , socket_connect_timeout = 2 , socket_timeout = 2 ) app = Flask ( __name__ ) @app . route ( \"/\" ) def hello (): try : visites = redis . incr ( \"compteur\" ) except RedisError : visites = \"<i>Erreur de connection Redis, compteur desactive</i>\" html = \"<h3>Bonjour {nom} !</h3>\" \\ \"<b>Hostname:</b> {hostname} <br/>\" \\ \"<b>Visites:</b> {visites} <br/>\" \\ \"<p>Abonne toi!</p>\" return html . format ( nom = os . getenv ( \"NOM\" , \"youtube\" ), hostname = socket . gethostname (), visites = visites ) if __name__ == \"__main__\" : app . run ( host = '0.0.0.0' , port = 80 ) Create requirements.txt cat <<EOF > requirements.txt Flask Redis EOF","title":"App"},{"location":"pages/tools/docker/docker-exercice2/#dockerfile","text":"Setup Dockerfile : # start from python slim image FROM python:2.7-slim # definite the working directory on the image : root/app WORKDIR /app # copy all file from current repo to /app COPY . /app # install python libs from requirements.txt RUN pip install -r requirements.txt # expose to the web (port 80) EXPOSE 80 # setup env variable nom=coca ENV NOM coca # execute app.py with python at container creation CMD [ \"python\" , \"app.py\" ] Create the Docker Image with: # create `monimage` from current directory # where Dockerfile exist docker build -t monimage .","title":"Dockerfile"},{"location":"pages/tools/docker/docker-exercice2/#docker-compose","text":"Create now docker-compose.yml : version: \"3\" services: monapp: image: monimage depends_on: - redis ports: - \"80:80\" networks: - monreseau environment: - NOM=les amis redis: image: redis networks: - monreseau networks: monreseau: We create here 2 services and the networks monapp : Create container from from our monimage created previously. it depends of redis service into monreseau network redis : Create container from redis into monreseau monreseau network declared","title":"Docker-compose"},{"location":"pages/tools/docker/docker-exercice2/#run-the-container-with-compose","text":"# it mount containers and create the services docker-compose up","title":"Run the container with compose"},{"location":"pages/tools/docker/docker-exercice2/#run-the-app-on-httplocalhost80","text":"GitHub Video","title":"Run the app on : http://localhost:80 !"},{"location":"pages/tools/docker/docker-start/","text":"Docker Start Find Docker Images Hub docker : https://hub.docker.com Basic Docker image docker image docker image essentials commands : docker image ... build # Build an image from a Dockerfile inspect # Display detailed information on one or more images load # Load an image from a tar archive or STDIN ls # List images prune # Remove unused images pull # Pull an image or a repository from a registry push # Push an image or a repository to a registry rm # Remove one or more images save # Save one or more images to a tar archive tag # Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # shorcut for docker image ls docker images # delete an image docker rmi image_name Docker container # list all container commands docker container # list all containers mounted docker container ls # list all containers (mounted and unmounted) docker container ls -a Docker pull # Download an docker imagz with pull docker pull hello-world Docker run # download image `ubuntu` and run in interactive mode like root user # --rm delete the container when exit it # bash is the command it run from the container docker run -it --rm ubuntu bash Docker activity with ps , rm, stop, prune # list all containers running docker ps # list all containers running and stopped docker ps -a # stop a container docker stop container_id # delete a container docker rm container_id # CLEAN docker ram remove : # - all stopped docker # - all networks not used # - all dangling images and build cache docker system prune Practice with docker # download image `debian` run and ssh login like root from it # -it = execute in interactive mode for run command without exit $ docker run -it debian # --rm : Automatically remove the container when we exit bash window $ docker run --rm -it debian # -v : Bind mount a volume $ docker run --rm -it -v ${ PWD } :/var/www/html debian # run a command from container $ docker run -rm -it -v ${ PWD } :/var/www/html \\ -p 8000 :80 \\ # Map 8O port from container to 8000 port php:apache \\ # The image with apache like tag apache2-foreground # The command to run Docker run always mount a fresh container from image Docker creation (commit) # List difference between the docker running and the image $ docker diff container_id # Save docker diff to the disk in a new image $ docker commit container_id debiantest # Exit and Export the new image $ exit $ docker save debiantest > /var/www/Lab/debiantest.tar Exemple docker-wordpress pas besoin de faire un docker pull # here we map the port of the container 80 to the machine 80 # -p external_port:container_port $ docker run -p 80 :80 tutum/wordpress # with -d : run the container in background WARMING The date in container are not persisted, you lost all when you close the bash, so you need to sync the data to the disk : # -v folder/to/your/disk:folder/in/docker # --name is for name the container with a nice name : $ docker ps # -d run docker in background task name ghost $ docker run --name some-ghost -p 8080 :2368 \\ -v /var/www/Lab/ghost:/varlib/ghost \\ -d ghost # I modify file in /var/www/Lab/ghost # if after I remove the container with: $ docker rm -f some-ghost # the container is destroyed # if I re create the container with the image : $ docker run --name some-ghost -p 8080 :2368 \\ -v /var/www/Lab/ghost:/varlib/ghost \\ -d ghost # The data is persisted because its always linked with /var/www/Lab/ghost Permission issue with Docker When you create file from container, the synchronized file are create like root user, it an issue. Just fix with --user param : # ${PWD}:/app : app container mapped to current folder $ docker run --rm -ti -v ${ PWD } :/app --user 1000 :100 -p 8000 :80 # get the user $ id -u 1000 # get group $ id -g 100 # use it in docker run $ docker run --rm -ti -v ${ PWD } :/app --user $( id -u ) : $( id -g )","title":"Docker Start"},{"location":"pages/tools/docker/docker-start/#docker-start","text":"","title":"Docker Start"},{"location":"pages/tools/docker/docker-start/#find-docker-images","text":"Hub docker : https://hub.docker.com","title":"Find Docker Images"},{"location":"pages/tools/docker/docker-start/#basic","text":"","title":"Basic"},{"location":"pages/tools/docker/docker-start/#docker-image","text":"docker image docker image essentials commands : docker image ... build # Build an image from a Dockerfile inspect # Display detailed information on one or more images load # Load an image from a tar archive or STDIN ls # List images prune # Remove unused images pull # Pull an image or a repository from a registry push # Push an image or a repository to a registry rm # Remove one or more images save # Save one or more images to a tar archive tag # Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # shorcut for docker image ls docker images # delete an image docker rmi image_name","title":"Docker image"},{"location":"pages/tools/docker/docker-start/#docker-container","text":"# list all container commands docker container # list all containers mounted docker container ls # list all containers (mounted and unmounted) docker container ls -a","title":"Docker container"},{"location":"pages/tools/docker/docker-start/#docker-pull","text":"# Download an docker imagz with pull docker pull hello-world","title":"Docker pull"},{"location":"pages/tools/docker/docker-start/#docker-run","text":"# download image `ubuntu` and run in interactive mode like root user # --rm delete the container when exit it # bash is the command it run from the container docker run -it --rm ubuntu bash","title":"Docker run"},{"location":"pages/tools/docker/docker-start/#docker-activity-with-ps-rm-stop-prune","text":"# list all containers running docker ps # list all containers running and stopped docker ps -a # stop a container docker stop container_id # delete a container docker rm container_id # CLEAN docker ram remove : # - all stopped docker # - all networks not used # - all dangling images and build cache docker system prune","title":"Docker activity with ps , rm, stop, prune"},{"location":"pages/tools/docker/docker-start/#practice-with-docker","text":"# download image `debian` run and ssh login like root from it # -it = execute in interactive mode for run command without exit $ docker run -it debian # --rm : Automatically remove the container when we exit bash window $ docker run --rm -it debian # -v : Bind mount a volume $ docker run --rm -it -v ${ PWD } :/var/www/html debian # run a command from container $ docker run -rm -it -v ${ PWD } :/var/www/html \\ -p 8000 :80 \\ # Map 8O port from container to 8000 port php:apache \\ # The image with apache like tag apache2-foreground # The command to run Docker run always mount a fresh container from image","title":"Practice with docker"},{"location":"pages/tools/docker/docker-start/#docker-creation-commit","text":"# List difference between the docker running and the image $ docker diff container_id # Save docker diff to the disk in a new image $ docker commit container_id debiantest # Exit and Export the new image $ exit $ docker save debiantest > /var/www/Lab/debiantest.tar","title":"Docker creation (commit)"},{"location":"pages/tools/docker/docker-start/#exemple-docker-wordpress","text":"pas besoin de faire un docker pull # here we map the port of the container 80 to the machine 80 # -p external_port:container_port $ docker run -p 80 :80 tutum/wordpress # with -d : run the container in background WARMING The date in container are not persisted, you lost all when you close the bash, so you need to sync the data to the disk : # -v folder/to/your/disk:folder/in/docker # --name is for name the container with a nice name : $ docker ps # -d run docker in background task name ghost $ docker run --name some-ghost -p 8080 :2368 \\ -v /var/www/Lab/ghost:/varlib/ghost \\ -d ghost # I modify file in /var/www/Lab/ghost # if after I remove the container with: $ docker rm -f some-ghost # the container is destroyed # if I re create the container with the image : $ docker run --name some-ghost -p 8080 :2368 \\ -v /var/www/Lab/ghost:/varlib/ghost \\ -d ghost # The data is persisted because its always linked with /var/www/Lab/ghost","title":"Exemple docker-wordpress"},{"location":"pages/tools/docker/docker-start/#permission-issue-with-docker","text":"When you create file from container, the synchronized file are create like root user, it an issue. Just fix with --user param : # ${PWD}:/app : app container mapped to current folder $ docker run --rm -ti -v ${ PWD } :/app --user 1000 :100 -p 8000 :80 # get the user $ id -u 1000 # get group $ id -g 100 # use it in docker run $ docker run --rm -ti -v ${ PWD } :/app --user $( id -u ) : $( id -g )","title":"Permission issue with Docker"},{"location":"pages/tools/static/docusaurus-create/","text":"Create doc with Docusaurus in GitLab Pages 2022-02-25 Here the Docusaurus docs et GitLab Pages docs . Create a Docusaurus project $ npx create-docusaurus@latest <your-repo> classic $ npm install @cmfcmf/docusaurus-search-local Add to docusaurus.config.js file before themeConfig: // ... plugins : [ [ require . resolve ( \"@cmfcmf/docusaurus-search-local\" ), { language : \"fr\" , } ], ], themeConfig : // ... Create the build and test the search with serve : $ npm run build $ npm run serve Go in repo cd <your-repo> And start the dev $ npx docusaurus start # or npm run start Custom project All are in docusaurus.config.js file Change the title and tagline const config = { title : 'YoanDev Doc' , tagline : 'Documenter c\\'est cool !' , Change the menu and logo: navbar : { title : 'YoanDev Doc' , logo : { alt : 'My Site Logo' , src : 'img/logo.svg' , }, Change the copyright in footer copyright : `Copyright \u00a9 ${ new Date (). getFullYear () } YoanDev Doc. Built with Docusaurus.` , Change the style with : src/css/custom.css Here a style generator : Styling layout in Docusaurus . Change dark theme: [ data-theme = 'dark' ] { --ifm-color-primary : #b3dde6 ; --ifm-color-primary-dark : #94cfdc ; --ifm-color-primary-darker : #85c8d7 ; --ifm-color-primary-darkest : #57b4c8 ; --ifm-color-primary-light : #d2ebf0 ; --ifm-color-primary-lighter : #e1f2f5 ; --ifm-color-primary-lightest : #ffffff ; } light theme: :root { --ifm-color-primary : #043c48 ; --ifm-color-primary-dark : #043641 ; --ifm-color-primary-darker : #03333d ; --ifm-color-primary-darkest : #032a32 ; --ifm-color-primary-light : #04424f ; --ifm-color-primary-lighter : #054553 ; --ifm-color-primary-lightest : #054e5e ; } Change Doc content Supress Blog 2 steps Delete blog directory and remove link in docusaurus.config.js file: // header menu { to : '/blog' , label : 'Blog' , position : 'left' }, // in footer { label : 'Blog' , to : '/blog' , }, Produce content Add a new section For exemple create a docs/efx-doc directory Create a file : _category_.json to the root of efx-doc directory : { \"label\" : \"YoanDev - Doc\" , \"position\" : 4 } And add a markdown demo.md file --- sidebar_position: 1 --- # Ceci est un H1 ## Ceci est un H2 ### Ceci est un H3 **Texte en gras** *Texte en italique* Ceci est une liste : * Lorem * ipsum > Ceci est un citation :::danger Ceci est le titre du bloc ! Ceci est un blog de **danger** ::: :::success Ceci est un blog de **success** ::: Doc are available : Add a extension theme syntax add-on, e.g. php Open docusaurus.config.js and add: prism : { theme : lightCodeTheme , darkTheme : darkCodeTheme , // Ajoutons le php avec cette ligne additionalLanguages : [ 'php' ], }, GitLab Pages Create the repo Create a free account on GitLab.com Create a GitLab repo Do a git push on it Add a pipe deployment La publication de notre Docusaurus sera piloter par un pipeline GitLab CI (Et si les pipeline CI/CD vous interesse, vous pouvez jetter un cop d\u2019oeil \u00e0 ma formation sur le sujet ) Cr\u00e9ation d\u2019un fichier .gitlab-ci.yml \u00e0 la racine du projet, avec le contenu suivant: image : node:15.12-alpine3.13 stages : - test - deploy test : stage : test script : - npm install --force - npm run build pages : stage : deploy script : - npm install --force - npm run build - mv ./build ./public artifacts : paths : - public only : - pages Ce fichier, va faire les choses suivantes : Lors d\u2019un push: lancer un npm run build pour v\u00e9rifier que le build fonctionne bien Lors d\u2019un push, ou merge request sur la branche pages : lancer le build et g\u00e9n\u00e9rer un artefact avec la version statique de notre Docusaurus On commit et on push La branche pages Cr\u00e9ons la branche pages depuis GitLab (cela devrait imm\u00e9diatement lancer le pipeline de d\u00e9ploiement) Une fois la CI/CD ex\u00e9cut\u00e9e, dans Settings > Pages , activons le https et faisons un save changes Et testons la page ( l\u2019obtebtion du certificat pour le HTTPS peut ne pas \u00eatre imm\u00e9diat ! ) Adpatons le projet \u00e0 notre d\u00e9pot GitLab Modifions notre fichier docusaurus.config.js avec les adresses de notre d\u00e9pot const config = { title : 'YoanDev Doc' , tagline : 'Documenter c\\'est cool !' , url : 'https://yoandev.co.gitlab.io' , baseUrl : '/yoandev-doc-prepa/' , onBrokenLinks : 'throw' , onBrokenMarkdownLinks : 'warn' , favicon : 'img/favicon.ico' , organizationName : 'yoandev' , // Usually your GitHub org/user name. projectName : 'yoandev-doc-prepa' , // Usually your repo name. presets : [ [ 'classic' , /** @type {import('@docusaurus/preset-classic').Options} */ ({ docs : { sidebarPath : require . resolve ( './sidebars.js' ), // Please change this to your repo. editUrl : 'https://gitlab.com/yoandev.co/yoandev-doc-prepa/-/edit/master/' , }, blog : { showReadingTime : true , // Please change this to your repo. editUrl : 'https://gitlab.com/yoandev.co/yoandev-doc-prepa/-/edit/master/' , }, theme : { customCss : require . resolve ( './src/css/custom.css' ), }, }), ], ], Et faisons une Merge Request de Master vers Pages , et constatons le r\u00e9sultat \ud83d\ude80 BONUS : Ajoutons un moteur de recherche Il existe des solutions plus performante pour mettre en place un moteur de recherche, mais celle-ci \u00e0 le bon gout de fonctionner simplement, rapidement, y compris pour un d\u00e9pot priv\u00e9 (et donc un GitLab Pages non accessible \u00e0 tous le monde) Installons la d\u00e9pendance docusaurus-serach-local npm install npm install @cmfcmf/docusaurus-search-local Ajoutons la recherche dans le fichier docusaurus.config.js // ... plugins : [ [ require . resolve ( \"@cmfcmf/docusaurus-search-local\" ), { language : \"fr\" , } ], ], themeConfig : // ... Et finalement testons npm run build npm run serve Il ne nous reste qu\u2019\u00e0 commit + push + MR sur la branche pages ! Conclusions Nous venons de voir comment mettre en ligne hyper simplement un site statique de documentation \u00e0 l\u2019aide de plusieurs outils : Docusaurus, Gitlab CI et GitLab Pages ! Vous n\u2019avez plus aucunes excuse pour ne pas \u00e9crire et partager de la documentations avec vos coll\u00e8gues (vous devriez vous faire des plateformes de doc !), pour vos clients ou vos utilisateurs ! Nous allons poursuivre prochainement notre d\u00e9couverte des outils de g\u00e9n\u00e9ration de sites statique (jamstack) avec un g\u00e9n\u00e9rateur super cool pour un blog\u2026 rendez vous bient\u00f4t !","title":"Create doc with Docusaurus in GitLab Pages"},{"location":"pages/tools/static/docusaurus-create/#create-doc-with-docusaurus-in-gitlab-pages","text":"2022-02-25 Here the Docusaurus docs et GitLab Pages docs . Create a Docusaurus project $ npx create-docusaurus@latest <your-repo> classic $ npm install @cmfcmf/docusaurus-search-local Add to docusaurus.config.js file before themeConfig: // ... plugins : [ [ require . resolve ( \"@cmfcmf/docusaurus-search-local\" ), { language : \"fr\" , } ], ], themeConfig : // ... Create the build and test the search with serve : $ npm run build $ npm run serve Go in repo cd <your-repo> And start the dev $ npx docusaurus start # or npm run start","title":"Create doc with Docusaurus in GitLab Pages"},{"location":"pages/tools/static/docusaurus-create/#custom-project","text":"","title":"Custom project"},{"location":"pages/tools/static/docusaurus-create/#all-are-in-docusaurusconfigjs-file","text":"Change the title and tagline const config = { title : 'YoanDev Doc' , tagline : 'Documenter c\\'est cool !' , Change the menu and logo: navbar : { title : 'YoanDev Doc' , logo : { alt : 'My Site Logo' , src : 'img/logo.svg' , }, Change the copyright in footer copyright : `Copyright \u00a9 ${ new Date (). getFullYear () } YoanDev Doc. Built with Docusaurus.` ,","title":"All are in docusaurus.config.js file"},{"location":"pages/tools/static/docusaurus-create/#change-the-style-with-srccsscustomcss","text":"Here a style generator : Styling layout in Docusaurus . Change dark theme: [ data-theme = 'dark' ] { --ifm-color-primary : #b3dde6 ; --ifm-color-primary-dark : #94cfdc ; --ifm-color-primary-darker : #85c8d7 ; --ifm-color-primary-darkest : #57b4c8 ; --ifm-color-primary-light : #d2ebf0 ; --ifm-color-primary-lighter : #e1f2f5 ; --ifm-color-primary-lightest : #ffffff ; } light theme: :root { --ifm-color-primary : #043c48 ; --ifm-color-primary-dark : #043641 ; --ifm-color-primary-darker : #03333d ; --ifm-color-primary-darkest : #032a32 ; --ifm-color-primary-light : #04424f ; --ifm-color-primary-lighter : #054553 ; --ifm-color-primary-lightest : #054e5e ; }","title":"Change the style with :\u00a0src/css/custom.css"},{"location":"pages/tools/static/docusaurus-create/#change-doc-content","text":"","title":"Change Doc content"},{"location":"pages/tools/static/docusaurus-create/#supress-blog","text":"2 steps Delete blog directory and remove link in docusaurus.config.js file: // header menu { to : '/blog' , label : 'Blog' , position : 'left' }, // in footer { label : 'Blog' , to : '/blog' , },","title":"Supress\u00a0Blog"},{"location":"pages/tools/static/docusaurus-create/#produce-content","text":"Add a new section For exemple create a docs/efx-doc directory Create a file : _category_.json to the root of efx-doc directory : { \"label\" : \"YoanDev - Doc\" , \"position\" : 4 } And add a markdown demo.md file --- sidebar_position: 1 --- # Ceci est un H1 ## Ceci est un H2 ### Ceci est un H3 **Texte en gras** *Texte en italique* Ceci est une liste : * Lorem * ipsum > Ceci est un citation :::danger Ceci est le titre du bloc ! Ceci est un blog de **danger** ::: :::success Ceci est un blog de **success** ::: Doc are available :","title":"Produce content"},{"location":"pages/tools/static/docusaurus-create/#add-a-extension-theme-syntax-add-on-eg-php","text":"Open docusaurus.config.js and add: prism : { theme : lightCodeTheme , darkTheme : darkCodeTheme , // Ajoutons le php avec cette ligne additionalLanguages : [ 'php' ], },","title":"Add a extension theme syntax add-on, e.g. php"},{"location":"pages/tools/static/docusaurus-create/#gitlab-pages","text":"","title":"GitLab Pages"},{"location":"pages/tools/static/docusaurus-create/#create-the-repo","text":"Create a free account on GitLab.com Create a GitLab repo Do a git push on it","title":"Create the repo"},{"location":"pages/tools/static/docusaurus-create/#add-a-pipe-deployment","text":"La publication de notre Docusaurus sera piloter par un pipeline GitLab CI (Et si les pipeline CI/CD vous interesse, vous pouvez jetter un cop d\u2019oeil \u00e0 ma formation sur le sujet ) Cr\u00e9ation d\u2019un fichier .gitlab-ci.yml \u00e0 la racine du projet, avec le contenu suivant: image : node:15.12-alpine3.13 stages : - test - deploy test : stage : test script : - npm install --force - npm run build pages : stage : deploy script : - npm install --force - npm run build - mv ./build ./public artifacts : paths : - public only : - pages Ce fichier, va faire les choses suivantes : Lors d\u2019un push: lancer un npm run build pour v\u00e9rifier que le build fonctionne bien Lors d\u2019un push, ou merge request sur la branche pages : lancer le build et g\u00e9n\u00e9rer un artefact avec la version statique de notre Docusaurus On commit et on push","title":"Add a pipe deployment"},{"location":"pages/tools/static/docusaurus-create/#la-branche-pages","text":"Cr\u00e9ons la branche pages depuis GitLab (cela devrait imm\u00e9diatement lancer le pipeline de d\u00e9ploiement) Une fois la CI/CD ex\u00e9cut\u00e9e, dans Settings > Pages , activons le https et faisons un save changes Et testons la page ( l\u2019obtebtion du certificat pour le HTTPS peut ne pas \u00eatre imm\u00e9diat ! )","title":"La branche\u00a0pages"},{"location":"pages/tools/static/docusaurus-create/#adpatons-le-projet-a-notre-depot-gitlab","text":"Modifions notre fichier docusaurus.config.js avec les adresses de notre d\u00e9pot const config = { title : 'YoanDev Doc' , tagline : 'Documenter c\\'est cool !' , url : 'https://yoandev.co.gitlab.io' , baseUrl : '/yoandev-doc-prepa/' , onBrokenLinks : 'throw' , onBrokenMarkdownLinks : 'warn' , favicon : 'img/favicon.ico' , organizationName : 'yoandev' , // Usually your GitHub org/user name. projectName : 'yoandev-doc-prepa' , // Usually your repo name. presets : [ [ 'classic' , /** @type {import('@docusaurus/preset-classic').Options} */ ({ docs : { sidebarPath : require . resolve ( './sidebars.js' ), // Please change this to your repo. editUrl : 'https://gitlab.com/yoandev.co/yoandev-doc-prepa/-/edit/master/' , }, blog : { showReadingTime : true , // Please change this to your repo. editUrl : 'https://gitlab.com/yoandev.co/yoandev-doc-prepa/-/edit/master/' , }, theme : { customCss : require . resolve ( './src/css/custom.css' ), }, }), ], ], Et faisons une Merge Request de Master vers Pages , et constatons le r\u00e9sultat \ud83d\ude80","title":"Adpatons le projet \u00e0 notre d\u00e9pot GitLab"},{"location":"pages/tools/static/docusaurus-create/#bonus-ajoutons-un-moteur-de-recherche","text":"Il existe des solutions plus performante pour mettre en place un moteur de recherche, mais celle-ci \u00e0 le bon gout de fonctionner simplement, rapidement, y compris pour un d\u00e9pot priv\u00e9 (et donc un GitLab Pages non accessible \u00e0 tous le monde) Installons la d\u00e9pendance docusaurus-serach-local npm install npm install @cmfcmf/docusaurus-search-local Ajoutons la recherche dans le fichier docusaurus.config.js // ... plugins : [ [ require . resolve ( \"@cmfcmf/docusaurus-search-local\" ), { language : \"fr\" , } ], ], themeConfig : // ... Et finalement testons npm run build npm run serve Il ne nous reste qu\u2019\u00e0 commit + push + MR sur la branche pages !","title":"BONUS : Ajoutons un\u00a0moteur de recherche"},{"location":"pages/tools/static/docusaurus-create/#conclusions","text":"Nous venons de voir comment mettre en ligne hyper simplement un site statique de documentation \u00e0 l\u2019aide de plusieurs outils : Docusaurus, Gitlab CI et GitLab Pages ! Vous n\u2019avez plus aucunes excuse pour ne pas \u00e9crire et partager de la documentations avec vos coll\u00e8gues (vous devriez vous faire des plateformes de doc !), pour vos clients ou vos utilisateurs ! Nous allons poursuivre prochainement notre d\u00e9couverte des outils de g\u00e9n\u00e9ration de sites statique (jamstack) avec un g\u00e9n\u00e9rateur super cool pour un blog\u2026 rendez vous bient\u00f4t !","title":"Conclusions"},{"location":"pages/tools/static/mkdocs-material/","text":"Install mkdocs-material # Install mkdocs before mkdocs new <my-project> cd <my-project> pip install mkdocs-material # add image zoom feature pip install mkdocs-glightbox Add line to mkdocs.yml : theme : name : material Run or deploy on Github site_name: <your_site_name> site_url: https://<account>.github.io/<your_site_name> site_author: your name site_description: >- Efxdev docs, exercices, tips on web technologies and tools # Repository repo_name: <account>/<your_site_name> repo_url: https://github.com/<account>/<your_site_name> # Run in local mkdocs serve # deploy on github page : # info with : mkdocs gh-deploy --help mkdocs gh-deploy If you want custom material template add in mkdocs.yml : theme: name: material custom_dir: overrides The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404.html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page See the detail of files in : ~/Desktop/dev/docs/templates/mkdocs-material Extending MkDocs Material Docs Custom mkdocs-material template git clone https://github.com/squidfunk/mkdocs-material cd mkdocs-material pip install -e . pip install mkdocs-minify-plugin pip install mkdocs-redirect npm install mkdocs serve # ? mkdocs serve --watch-theme Doc & source mkdocs-material Git Material for MkDocs Customization - Material for MkDocs Installing the dev git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -e . pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install Start the watcher: npm start and in a seconde bash launch the preview: mkdocs serve --watch-theme Doc Installing dev of Material for MkDocs","title":"Install mkdocs-material"},{"location":"pages/tools/static/mkdocs-material/#install-mkdocs-material","text":"# Install mkdocs before mkdocs new <my-project> cd <my-project> pip install mkdocs-material # add image zoom feature pip install mkdocs-glightbox Add line to mkdocs.yml : theme : name : material Run or deploy on Github site_name: <your_site_name> site_url: https://<account>.github.io/<your_site_name> site_author: your name site_description: >- Efxdev docs, exercices, tips on web technologies and tools # Repository repo_name: <account>/<your_site_name> repo_url: https://github.com/<account>/<your_site_name> # Run in local mkdocs serve # deploy on github page : # info with : mkdocs gh-deploy --help mkdocs gh-deploy If you want custom material template add in mkdocs.yml : theme: name: material custom_dir: overrides The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404.html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page See the detail of files in : ~/Desktop/dev/docs/templates/mkdocs-material Extending MkDocs Material Docs","title":"Install mkdocs-material"},{"location":"pages/tools/static/mkdocs-material/#custom-mkdocs-material-template","text":"git clone https://github.com/squidfunk/mkdocs-material cd mkdocs-material pip install -e . pip install mkdocs-minify-plugin pip install mkdocs-redirect npm install mkdocs serve # ? mkdocs serve --watch-theme","title":"Custom mkdocs-material template"},{"location":"pages/tools/static/mkdocs-material/#doc-source","text":"mkdocs-material Git Material for MkDocs Customization - Material for MkDocs","title":"Doc &amp; source"},{"location":"pages/tools/static/mkdocs-material/#installing-the-dev","text":"git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -e . pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install Start the watcher: npm start and in a seconde bash launch the preview: mkdocs serve --watch-theme Doc Installing dev of Material for MkDocs","title":"Installing the dev"}]}